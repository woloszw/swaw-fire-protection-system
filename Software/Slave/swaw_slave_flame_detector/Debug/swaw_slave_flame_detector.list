
swaw_slave_flame_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003864  08003864  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003864  08003864  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003878  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003878  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f170  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002704  00000000  00000000  0002f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000318a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  000325e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a666  00000000  00000000  000331f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011adf  00000000  00000000  0004d856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b52  00000000  00000000  0005f335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  000f4ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003800 	.word	0x08003800

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003800 	.word	0x08003800

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f003 fadd 	bl	80037ee <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000236:	4a2d      	ldr	r2, [pc, #180]	; (80002ec <MX_ADC_Init+0xcc>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <MX_ADC_Init+0xc8>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <MX_ADC_Init+0xc8>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <MX_ADC_Init+0xc8>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000264:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000266:	2200      	movs	r2, #0
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <MX_ADC_Init+0xc8>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <MX_ADC_Init+0xc8>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2100      	movs	r1, #0
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000288:	2200      	movs	r2, #0
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_ADC_Init+0xc8>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 ff94 	bl	80011bc <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 fc00 	bl	8000a9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2204      	movs	r2, #4
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2201      	movs	r2, #1
 80002ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f9f8 	bl	80016ac <HAL_ADC_ConfigChannel>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80002c0:	f000 fbec 	bl	8000a9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2205      	movs	r2, #5
 80002c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ca:	1d3a      	adds	r2, r7, #4
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 f9eb 	bl	80016ac <HAL_ADC_ConfigChannel>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80002da:	f000 fbdf 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
//
  /* USER CODE END ADC_Init 2 */

}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40012400 	.word	0x40012400

080002f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08b      	sub	sp, #44	; 0x2c
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	2414      	movs	r4, #20
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 fa73 	bl	80037ee <memset>
  if(adcHandle->Instance==ADC1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a19      	ldr	r2, [pc, #100]	; (8000374 <HAL_ADC_MspInit+0x84>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d12b      	bne.n	800036a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000314:	699a      	ldr	r2, [r3, #24]
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0089      	lsls	r1, r1, #2
 800031c:	430a      	orrs	r2, r1
 800031e:	619a      	str	r2, [r3, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000322:	699a      	ldr	r2, [r3, #24]
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000330:	695a      	ldr	r2, [r3, #20]
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	0289      	lsls	r1, r1, #10
 8000338:	430a      	orrs	r2, r1
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <HAL_ADC_MspInit+0x88>)
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	029b      	lsls	r3, r3, #10
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = FLAME_SENS_ADC_PIN_Pin|GAS_SENS_ADC_PIN_Pin;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2230      	movs	r2, #48	; 0x30
 800034e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000350:	193b      	adds	r3, r7, r4
 8000352:	2203      	movs	r2, #3
 8000354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	193a      	adds	r2, r7, r4
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	0011      	movs	r1, r2
 8000364:	0018      	movs	r0, r3
 8000366:	f001 feb7 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b00b      	add	sp, #44	; 0x2c
 8000370:	bd90      	pop	{r4, r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	40012400 	.word	0x40012400
 8000378:	40021000 	.word	0x40021000

0800037c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_CAN_Init+0x68>)
 8000382:	4a19      	ldr	r2, [pc, #100]	; (80003e8 <MX_CAN_Init+0x6c>)
 8000384:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 100;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_CAN_Init+0x68>)
 8000388:	2264      	movs	r2, #100	; 0x64
 800038a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_CAN_Init+0x68>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_CAN_Init+0x68>)
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0452      	lsls	r2, r2, #17
 8000398:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_CAN_Init+0x68>)
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0252      	lsls	r2, r2, #9
 80003a0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_CAN_Init+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_CAN_Init+0x68>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_CAN_Init+0x68>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_CAN_Init+0x68>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_CAN_Init+0x68>)
 80003bc:	2201      	movs	r2, #1
 80003be:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_CAN_Init+0x68>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_CAN_Init+0x68>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <MX_CAN_Init+0x68>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fbc5 	bl	8001b5e <HAL_CAN_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003d8:	f000 fb60 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	20000068 	.word	0x20000068
 80003e8:	40006400 	.word	0x40006400

080003ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08b      	sub	sp, #44	; 0x2c
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	2414      	movs	r4, #20
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	0018      	movs	r0, r3
 80003fa:	2314      	movs	r3, #20
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f003 f9f5 	bl	80037ee <memset>
  if(canHandle->Instance==CAN)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a2f      	ldr	r2, [pc, #188]	; (80004c8 <HAL_CAN_MspInit+0xdc>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d157      	bne.n	80004be <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800040e:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000410:	69da      	ldr	r2, [r3, #28]
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0489      	lsls	r1, r1, #18
 8000418:	430a      	orrs	r2, r1
 800041a:	61da      	str	r2, [r3, #28]
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800041e:	69da      	ldr	r2, [r3, #28]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	049b      	lsls	r3, r3, #18
 8000424:	4013      	ands	r3, r2
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	02c9      	lsls	r1, r1, #11
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	02db      	lsls	r3, r3, #11
 8000440:	4013      	ands	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b20      	ldr	r3, [pc, #128]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0289      	lsls	r1, r1, #10
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	029b      	lsls	r3, r3, #10
 800045c:	4013      	ands	r3, r2
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_PIN_Pin;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2202      	movs	r2, #2
 800046e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2201      	movs	r2, #1
 8000474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2203      	movs	r2, #3
 800047a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2204      	movs	r2, #4
 8000480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CAN_RX_PIN_GPIO_Port, &GPIO_InitStruct);
 8000482:	193b      	adds	r3, r7, r4
 8000484:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <HAL_CAN_MspInit+0xe4>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f001 fe25 	bl	80020d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_PIN_Pin;
 800048e:	0021      	movs	r1, r4
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	0152      	lsls	r2, r2, #5
 8000496:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2201      	movs	r2, #1
 80004a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2203      	movs	r2, #3
 80004a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2204      	movs	r2, #4
 80004ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CAN_TX_PIN_GPIO_Port, &GPIO_InitStruct);
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fe0d 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b00b      	add	sp, #44	; 0x2c
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40006400 	.word	0x40006400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400

080004d4 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  return wire_init();
 80004d8:	f000 fc4a 	bl	8000d70 <wire_init>
 80004dc:	0003      	movs	r3, r0
}
 80004de:	0018      	movs	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <ds18b20_read_address>:

HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 80004ec:	f000 fc62 	bl	8000db4 <wire_reset>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <ds18b20_read_address+0x14>
    return HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	e025      	b.n	8000544 <ds18b20_read_address+0x60>

  wire_write(DS18B20_READ_ROM);
 80004f8:	2033      	movs	r0, #51	; 0x33
 80004fa:	f000 fd17 	bl	8000f2c <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e009      	b.n	8000518 <ds18b20_read_address+0x34>
    rom_code[i] = wire_read();
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	18d4      	adds	r4, r2, r3
 800050a:	f000 fcb2 	bl	8000e72 <wire_read>
 800050e:	0003      	movs	r3, r0
 8000510:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b07      	cmp	r3, #7
 800051c:	ddf2      	ble.n	8000504 <ds18b20_read_address+0x20>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 800051e:	250b      	movs	r5, #11
 8000520:	197c      	adds	r4, r7, r5
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2107      	movs	r1, #7
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fd56 	bl	8000fd8 <wire_crc>
 800052c:	0003      	movs	r3, r0
 800052e:	7023      	strb	r3, [r4, #0]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3307      	adds	r3, #7
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	197a      	adds	r2, r7, r5
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d101      	bne.n	8000542 <ds18b20_read_address+0x5e>
    return HAL_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <ds18b20_read_address+0x60>
  else
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	b004      	add	sp, #16
 800054a:	bdb0      	pop	{r4, r5, r7, pc}

0800054c <send_cmd>:
static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	000a      	movs	r2, r1
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	701a      	strb	r2, [r3, #0]
  int i;

  if (wire_reset() != HAL_OK)
 800055a:	f000 fc2b 	bl	8000db4 <wire_reset>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <send_cmd+0x1a>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e01f      	b.n	80005a6 <send_cmd+0x5a>

  if (!rom_code) {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800056c:	20cc      	movs	r0, #204	; 0xcc
 800056e:	f000 fcdd 	bl	8000f2c <wire_write>
 8000572:	e012      	b.n	800059a <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000574:	2055      	movs	r0, #85	; 0x55
 8000576:	f000 fcd9 	bl	8000f2c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e009      	b.n	8000594 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	18d3      	adds	r3, r2, r3
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fccf 	bl	8000f2c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2b07      	cmp	r3, #7
 8000598:	ddf2      	ble.n	8000580 <send_cmd+0x34>
  }
  wire_write(cmd);
 800059a:	1cfb      	adds	r3, r7, #3
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fcc4 	bl	8000f2c <wire_write>
  return HAL_OK;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	0018      	movs	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b004      	add	sp, #16
 80005ac:	bd80      	pop	{r7, pc}

080005ae <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2144      	movs	r1, #68	; 0x44
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff ffc6 	bl	800054c <send_cmd>
 80005c0:	0003      	movs	r3, r0
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ds18b20_read_scratchpad>:


static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 80005ca:	b5b0      	push	{r4, r5, r7, lr}
 80005cc:	b084      	sub	sp, #16
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	21be      	movs	r1, #190	; 0xbe
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff ffb7 	bl	800054c <send_cmd>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e022      	b.n	800062c <ds18b20_read_scratchpad+0x62>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e009      	b.n	8000600 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	18d4      	adds	r4, r2, r3
 80005f2:	f000 fc3e 	bl	8000e72 <wire_read>
 80005f6:	0003      	movs	r3, r0
 80005f8:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b08      	cmp	r3, #8
 8000604:	ddf2      	ble.n	80005ec <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000606:	250b      	movs	r5, #11
 8000608:	197c      	adds	r4, r7, r5
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2108      	movs	r1, #8
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fce2 	bl	8000fd8 <wire_crc>
 8000614:	0003      	movs	r3, r0
 8000616:	7023      	strb	r3, [r4, #0]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	3308      	adds	r3, #8
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	197a      	adds	r2, r7, r5
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d101      	bne.n	800062a <ds18b20_read_scratchpad+0x60>
    return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <ds18b20_read_scratchpad+0x62>
  else
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bdb0      	pop	{r4, r5, r7, pc}

08000634 <ds18b20_get_temp>:

int16_t ds18b20_get_temp(const uint8_t* rom_code)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 800063c:	230c      	movs	r3, #12
 800063e:	18fa      	adds	r2, r7, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ffc0 	bl	80005ca <ds18b20_read_scratchpad>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d002      	beq.n	8000654 <ds18b20_get_temp+0x20>
    return 1360;
 800064e:	23aa      	movs	r3, #170	; 0xaa
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	e00a      	b.n	800066a <ds18b20_get_temp+0x36>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000654:	230c      	movs	r3, #12
 8000656:	18f9      	adds	r1, r7, r3
 8000658:	240a      	movs	r4, #10
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2202      	movs	r2, #2
 800065e:	0018      	movs	r0, r3
 8000660:	f003 f8bc 	bl	80037dc <memcpy>

  return temp;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	5e9b      	ldrsh	r3, [r3, r2]
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b007      	add	sp, #28
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <flame_sensor_read>:
#include "adc.h"

HAL_StatusTypeDef flame_sensor_read(uint16_t* flame_ptr){
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig_4 = {0};
 800067c:	2408      	movs	r4, #8
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	230c      	movs	r3, #12
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f003 f8b1 	bl	80037ee <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig_4.Channel = ADC_CHANNEL_4;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2204      	movs	r2, #4
 8000690:	601a      	str	r2, [r3, #0]
	  sConfig_4.Rank = 1;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
	  sConfig_4.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2203      	movs	r2, #3
 800069c:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig_4) != HAL_OK)
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <flame_sensor_read+0xb4>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 f801 	bl	80016ac <HAL_ADC_ConfigChannel>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <flame_sensor_read+0x3e>
	  {
		Error_Handler();
 80006ae:	f000 f9f5 	bl	8000a9c <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc);
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <flame_sensor_read+0xb4>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fec1 	bl	800143c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80006ba:	2301      	movs	r3, #1
 80006bc:	425a      	negs	r2, r3
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <flame_sensor_read+0xb4>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 ff4e 	bl	8001564 <HAL_ADC_PollForConversion>
	  while(HAL_ADC_GetState(&hadc)== HAL_ADC_STATE_BUSY){}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <flame_sensor_read+0xb4>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f8fb 	bl	80018c8 <HAL_ADC_GetState>
 80006d2:	0003      	movs	r3, r0
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d0f8      	beq.n	80006ca <flame_sensor_read+0x56>
	  uint16_t adcValue = (uint16_t)HAL_ADC_GetValue(&hadc);
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <flame_sensor_read+0xb4>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 ffda 	bl	8001694 <HAL_ADC_GetValue>
 80006e0:	0002      	movs	r2, r0
 80006e2:	2316      	movs	r3, #22
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <flame_sensor_read+0xb4>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fefa 	bl	80014e4 <HAL_ADC_Stop>

	  sConfig_4.Rank = ADC_RANK_NONE;
 80006f0:	2108      	movs	r1, #8
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <flame_sensor_read+0xb8>)
 80006f6:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig_4) != HAL_OK)
 80006f8:	187a      	adds	r2, r7, r1
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <flame_sensor_read+0xb4>)
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 ffd4 	bl	80016ac <HAL_ADC_ConfigChannel>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <flame_sensor_read+0x98>
	  {
		Error_Handler();
 8000708:	f000 f9c8 	bl	8000a9c <Error_Handler>
	  }


	  HAL_Delay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f000 fd31 	bl	8001174 <HAL_Delay>
	  *flame_ptr = adcValue;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2216      	movs	r2, #22
 8000716:	18ba      	adds	r2, r7, r2
 8000718:	8812      	ldrh	r2, [r2, #0]
 800071a:	801a      	strh	r2, [r3, #0]

	  return HAL_OK;
 800071c:	2300      	movs	r3, #0

}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b007      	add	sp, #28
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000028 	.word	0x20000028
 800072c:	00001001 	.word	0x00001001

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	240c      	movs	r4, #12
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 f854 	bl	80037ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <MX_GPIO_Init+0x110>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x110>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	02c9      	lsls	r1, r1, #11
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_GPIO_Init+0x110>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	02db      	lsls	r3, r3, #11
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_GPIO_Init+0x110>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <MX_GPIO_Init+0x110>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	03c9      	lsls	r1, r1, #15
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b33      	ldr	r3, [pc, #204]	; (8000840 <MX_GPIO_Init+0x110>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	03db      	lsls	r3, r3, #15
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <MX_GPIO_Init+0x110>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_GPIO_Init+0x110>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_GPIO_Init+0x110>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|ID_0_PIN_Pin|ID_1_PIN_Pin, GPIO_PIN_RESET);
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2200      	movs	r2, #0
 80007a0:	21c3      	movs	r1, #195	; 0xc3
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fe1d 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ID_2_PIN_GPIO_Port, ID_2_PIN_Pin, GPIO_PIN_RESET);
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x114>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	2102      	movs	r1, #2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fe17 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	0119      	lsls	r1, r3, #4
 80007b8:	2390      	movs	r3, #144	; 0x90
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2201      	movs	r2, #1
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fe0f 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|ID_0_PIN_Pin|ID_1_PIN_Pin;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	22c3      	movs	r2, #195	; 0xc3
 80007c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	193a      	adds	r2, r7, r4
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fc77 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_2_PIN_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2202      	movs	r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2201      	movs	r2, #1
 80007f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ID_2_PIN_GPIO_Port, &GPIO_InitStruct);
 8000802:	193b      	adds	r3, r7, r4
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MX_GPIO_Init+0x114>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f001 fc65 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ONE_WIRE_Pin;
 800080e:	0021      	movs	r1, r4
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2211      	movs	r2, #17
 800081c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 800082a:	187a      	adds	r2, r7, r1
 800082c:	2390      	movs	r3, #144	; 0x90
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fc50 	bl	80020d8 <HAL_GPIO_Init>

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b009      	add	sp, #36	; 0x24
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	48000400 	.word	0x48000400

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b09d      	sub	sp, #116	; 0x74
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t slave_id = 0;
 800084e:	236f      	movs	r3, #111	; 0x6f
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fc29 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f8d1 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff ff67 	bl	8000730 <MX_GPIO_Init>
  MX_ADC_Init();
 8000862:	f7ff fcdd 	bl	8000220 <MX_ADC_Init>
  MX_CAN_Init();
 8000866:	f7ff fd89 	bl	800037c <MX_CAN_Init>
  MX_USART2_UART_Init();
 800086a:	f000 fa05 	bl	8000c78 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800086e:	f000 f9bb 	bl	8000be8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 8000872:	2350      	movs	r3, #80	; 0x50
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	4a5c      	ldr	r2, [pc, #368]	; (80009e8 <main+0x1a0>)
 8000878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800087a:	c313      	stmia	r3!, {r0, r1, r4}
 800087c:	6811      	ldr	r1, [r2, #0]
 800087e:	6019      	str	r1, [r3, #0]
 8000880:	8892      	ldrh	r2, [r2, #4]
 8000882:	809a      	strh	r2, [r3, #4]
  uint8_t txbuf[32];

  if (ds18b20_init() != HAL_OK) {
 8000884:	f7ff fe26 	bl	80004d4 <ds18b20_init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <main+0x48>
    Error_Handler();
 800088c:	f000 f906 	bl	8000a9c <Error_Handler>
  }

  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 8000890:	2328      	movs	r3, #40	; 0x28
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fe25 	bl	80004e4 <ds18b20_read_address>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <main+0x5a>
    Error_Handler();
 800089e:	f000 f8fd 	bl	8000a9c <Error_Handler>
  }
  //dip switch slave id read
  int tmp_id;
  tmp_id =HAL_GPIO_ReadPin(ID_0_PIN_GPIO_Port, ID_0_PIN_Pin);
 80008a2:	2390      	movs	r3, #144	; 0x90
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fd7d 	bl	80023a8 <HAL_GPIO_ReadPin>
 80008ae:	0003      	movs	r3, r0
 80008b0:	66bb      	str	r3, [r7, #104]	; 0x68
  slave_id |= tmp_id;
 80008b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008b4:	b25a      	sxtb	r2, r3
 80008b6:	246f      	movs	r4, #111	; 0x6f
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b25a      	sxtb	r2, r3
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	701a      	strb	r2, [r3, #0]
  tmp_id =HAL_GPIO_ReadPin(ID_1_PIN_GPIO_Port, ID_1_PIN_Pin);
 80008c6:	2390      	movs	r3, #144	; 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fd6b 	bl	80023a8 <HAL_GPIO_ReadPin>
 80008d2:	0003      	movs	r3, r0
 80008d4:	66bb      	str	r3, [r7, #104]	; 0x68
  slave_id |= (tmp_id<<1);
 80008d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	b25a      	sxtb	r2, r3
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25a      	sxtb	r2, r3
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	701a      	strb	r2, [r3, #0]
  tmp_id =HAL_GPIO_ReadPin(ID_2_PIN_GPIO_Port, ID_2_PIN_Pin);
 80008ea:	4b40      	ldr	r3, [pc, #256]	; (80009ec <main+0x1a4>)
 80008ec:	2102      	movs	r1, #2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 fd5a 	bl	80023a8 <HAL_GPIO_ReadPin>
 80008f4:	0003      	movs	r3, r0
 80008f6:	66bb      	str	r3, [r7, #104]	; 0x68
  slave_id |= (tmp_id<<2);
 80008f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	193b      	adds	r3, r7, r4
 800090a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800090c:	23fa      	movs	r3, #250	; 0xfa
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fc2f 	bl	8001174 <HAL_Delay>


  // struct for can
  CAN_TxHeaderTypeDef txHeader;
  uint32_t              TxMailbox;
  uint32_t can_node_id_base = slave_id << 8;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	667b      	str	r3, [r7, #100]	; 0x64
  //connect to master frame

  uint8_t connect_byte = 0xff;
 800091e:	200b      	movs	r0, #11
 8000920:	183b      	adds	r3, r7, r0
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	701a      	strb	r2, [r3, #0]
  txHeader.StdId = can_node_id_base;
 8000926:	2110      	movs	r1, #16
 8000928:	187b      	adds	r3, r7, r1
 800092a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800092c:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0;      // ID rozszerzone (0 dla ramki standardowej)
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  txHeader.RTR = CAN_RTR_DATA;  // Tryb transmisji - dane
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  txHeader.IDE = CAN_ID_STD;    // Format identyfikatora - standardowy
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  txHeader.DLC = 1;  // Długość danych (w bajtach)
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	611a      	str	r2, [r3, #16]

  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, &connect_byte, &TxMailbox) == HAL_OK) {
 8000946:	230c      	movs	r3, #12
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	183a      	adds	r2, r7, r0
 800094c:	000c      	movs	r4, r1
 800094e:	1879      	adds	r1, r7, r1
 8000950:	4827      	ldr	r0, [pc, #156]	; (80009f0 <main+0x1a8>)
 8000952:	f001 fa02 	bl	8001d5a <HAL_CAN_AddTxMessage>
 	  } else {
 	    // Błąd podczas dodawania wiadomości do kolejki transmisji
 	  }

 	  // Czekanie na zakończenie transmisji
 	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 3) {
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <main+0x1a8>)
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fad0 	bl	8001efe <HAL_CAN_GetTxMailboxesFreeLevel>



  uint8_t tx_can_data[6];

  txHeader.StdId = can_node_id_base | 0x1;  // Node ID
 800095e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000960:	2201      	movs	r2, #1
 8000962:	431a      	orrs	r2, r3
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	601a      	str	r2, [r3, #0]

  txHeader.ExtId = 0;      // ID rozszerzone (0 dla ramki standardowej)
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  txHeader.RTR = CAN_RTR_DATA;  // Tryb transmisji - dane
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  txHeader.IDE = CAN_ID_STD;    // Format identyfikatora - standardowy
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  txHeader.DLC = 6;  // Długość danych (w bajtach)
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2206      	movs	r2, #6
 8000980:	611a      	str	r2, [r3, #16]
//	  sprintf((char*)txbuf, "ID: %d\r\n", slave_id);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
	  while (1)
	  {

	    ds18b20_start_measure(NULL);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fe13 	bl	80005ae <ds18b20_start_measure>
	    HAL_Delay(750);
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <main+0x1ac>)
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fbf2 	bl	8001174 <HAL_Delay>
	    payload_slv.temp_val = ds18b20_get_temp(NULL);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fe4f 	bl	8000634 <ds18b20_get_temp>
 8000996:	0003      	movs	r3, r0
 8000998:	001a      	movs	r2, r3
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <main+0x1b0>)
 800099c:	809a      	strh	r2, [r3, #4]
//	  sprintf((char*)txbuf, "Temp vlaue: %d\r\n", payload_slv.temp_val);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
//
//
//
	  flame_sensor_read(&payload_slv.flame_val);
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <main+0x1b4>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff fe67 	bl	8000674 <flame_sensor_read>
//	  sprintf((char*)txbuf, "Flame vlaue: %d\r\n", payload_slv.flame_val);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
	  HAL_Delay(1000);
 80009a6:	23fa      	movs	r3, #250	; 0xfa
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fbe2 	bl	8001174 <HAL_Delay>
	  smoke_sensor_read(&payload_slv.smoke_val);
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <main+0x1b0>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f878 	bl	8000aa8 <smoke_sensor_read>
//	  sprintf((char*)txbuf, "Smoke vlaue: %d\r\n", payload_slv.smoke_val);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
//
//
//	  HAL_UART_Transmit(&huart2,Test,strlen(Test),10);// Sending in normal mode
	  memcpy(tx_can_data, &payload_slv, sizeof(payload_slv));
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <main+0x1b0>)
 80009bc:	6811      	ldr	r1, [r2, #0]
 80009be:	6019      	str	r1, [r3, #0]
 80009c0:	8892      	ldrh	r2, [r2, #4]
 80009c2:	809a      	strh	r2, [r3, #4]

	  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, tx_can_data, &TxMailbox) == HAL_OK) {
 80009c4:	230c      	movs	r3, #12
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	1d3a      	adds	r2, r7, #4
 80009ca:	2110      	movs	r1, #16
 80009cc:	1879      	adds	r1, r7, r1
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <main+0x1a8>)
 80009d0:	f001 f9c3 	bl	8001d5a <HAL_CAN_AddTxMessage>
	  } else {
	    // Błąd podczas dodawania wiadomości do kolejki transmisji
	  }

	  // Czekanie na zakończenie transmisji
	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 3) {
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <main+0x1a8>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fa91 	bl	8001efe <HAL_CAN_GetTxMailboxesFreeLevel>
	    // Wszystkie skrzynki nadawcze są wolne, transmisja zakończona
	  }


	  HAL_Delay(1000);
 80009dc:	23fa      	movs	r3, #250	; 0xfa
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fbc7 	bl	8001174 <HAL_Delay>
	    ds18b20_start_measure(NULL);
 80009e6:	e7cc      	b.n	8000982 <main+0x13a>
 80009e8:	08003818 	.word	0x08003818
 80009ec:	48000400 	.word	0x48000400
 80009f0:	20000068 	.word	0x20000068
 80009f4:	000002ee 	.word	0x000002ee
 80009f8:	20000090 	.word	0x20000090
 80009fc:	20000092 	.word	0x20000092

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b093      	sub	sp, #76	; 0x4c
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	2414      	movs	r4, #20
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2334      	movs	r3, #52	; 0x34
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f002 feec 	bl	80037ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f002 fee5 	bl	80037ee <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000a24:	0021      	movs	r1, r4
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2230      	movs	r2, #48	; 0x30
 8000a2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2201      	movs	r2, #1
 8000a36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2210      	movs	r2, #16
 8000a3c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2202      	movs	r2, #2
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	22c0      	movs	r2, #192	; 0xc0
 8000a48:	0252      	lsls	r2, r2, #9
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV6;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2205      	movs	r2, #5
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fcdd 	bl	800241c <HAL_RCC_OscConfig>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f819 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2202      	movs	r2, #2
 8000a74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2101      	movs	r1, #1
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 f84e 	bl	8002b28 <HAL_RCC_ClockConfig>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a90:	f000 f804 	bl	8000a9c <Error_Handler>
  }
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b013      	add	sp, #76	; 0x4c
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <smoke_sensor_read>:
#include "adc.h"


HAL_StatusTypeDef smoke_sensor_read(uint16_t* smoke_ptr){
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab0:	2408      	movs	r4, #8
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f002 fe97 	bl	80037ee <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8000ac0:	0021      	movs	r1, r4
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0152      	lsls	r2, r2, #5
 8000ace:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ad6:	187a      	adds	r2, r7, r1
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <smoke_sensor_read+0xa8>)
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fde5 	bl	80016ac <HAL_ADC_ConfigChannel>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <smoke_sensor_read+0x42>
	  {
		Error_Handler();
 8000ae6:	f7ff ffd9 	bl	8000a9c <Error_Handler>
	  }

	  HAL_ADC_Start(&hadc);
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <smoke_sensor_read+0xa8>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fca5 	bl	800143c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000af2:	2301      	movs	r3, #1
 8000af4:	425a      	negs	r2, r3
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <smoke_sensor_read+0xa8>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fd32 	bl	8001564 <HAL_ADC_PollForConversion>
	  uint16_t adcValue = (uint16_t)HAL_ADC_GetValue(&hadc);
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <smoke_sensor_read+0xa8>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fdc6 	bl	8001694 <HAL_ADC_GetValue>
 8000b08:	0002      	movs	r2, r0
 8000b0a:	2316      	movs	r3, #22
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <smoke_sensor_read+0xa8>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fce6 	bl	80014e4 <HAL_ADC_Stop>

	  sConfig.Rank = ADC_RANK_NONE;
 8000b18:	2108      	movs	r1, #8
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <smoke_sensor_read+0xac>)
 8000b1e:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <smoke_sensor_read+0xa8>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fdc0 	bl	80016ac <HAL_ADC_ConfigChannel>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <smoke_sensor_read+0x8c>
	  {
		Error_Handler();
 8000b30:	f7ff ffb4 	bl	8000a9c <Error_Handler>
	  }

	  HAL_Delay(100);
 8000b34:	2064      	movs	r0, #100	; 0x64
 8000b36:	f000 fb1d 	bl	8001174 <HAL_Delay>

	  *smoke_ptr = adcValue;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	18ba      	adds	r2, r7, r2
 8000b40:	8812      	ldrh	r2, [r2, #0]
 8000b42:	801a      	strh	r2, [r3, #0]

	  return HAL_OK;
 8000b44:	2300      	movs	r3, #0

}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b007      	add	sp, #28
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000028 	.word	0x20000028
 8000b54:	00001001 	.word	0x00001001

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_MspInit+0x50>)
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_MspInit+0x50>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	619a      	str	r2, [r3, #24]
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x50>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4013      	ands	r3, r2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_MspInit+0x50>)
 8000b78:	69da      	ldr	r2, [r3, #28]
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_MspInit+0x50>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0549      	lsls	r1, r1, #21
 8000b80:	430a      	orrs	r2, r1
 8000b82:	61da      	str	r2, [r3, #28]
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x50>)
 8000b86:	69da      	ldr	r2, [r3, #28]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	055b      	lsls	r3, r3, #21
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x54>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_MspInit+0x54>)
 8000b98:	2110      	movs	r1, #16
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 fab2 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <MX_TIM17_Init+0x48>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 39;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000bf4:	2227      	movs	r2, #39	; 0x27
 8000bf6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <MX_TIM17_Init+0x4c>)
 8000c02:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <MX_TIM17_Init+0x44>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 f8f3 	bl	8002e04 <HAL_TIM_Base_Init>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000c22:	f7ff ff3b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	40014800 	.word	0x40014800
 8000c34:	0000ffff 	.word	0x0000ffff

08000c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x38>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c4c:	699a      	ldr	r2, [r3, #24]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	02c9      	lsls	r1, r1, #11
 8000c54:	430a      	orrs	r2, r1
 8000c56:	619a      	str	r2, [r3, #24]
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5a:	699a      	ldr	r2, [r3, #24]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	02db      	lsls	r3, r3, #11
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40014800 	.word	0x40014800
 8000c74:	40021000 	.word	0x40021000

08000c78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_USART2_UART_Init+0x5c>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c84:	22e1      	movs	r2, #225	; 0xe1
 8000c86:	0252      	lsls	r2, r2, #9
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x58>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 f9ab 	bl	8003018 <HAL_UART_Init>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f7ff fee9 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000e0 	.word	0x200000e0
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	2414      	movs	r4, #20
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f002 fd7f 	bl	80037ee <memset>
  if(uartHandle->Instance==USART2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0x90>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d132      	bne.n	8000d60 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_UART_MspInit+0x94>)
 8000cfc:	69da      	ldr	r2, [r3, #28]
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x94>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0289      	lsls	r1, r1, #10
 8000d04:	430a      	orrs	r2, r1
 8000d06:	61da      	str	r2, [r3, #28]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x94>)
 8000d0a:	69da      	ldr	r2, [r3, #28]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	029b      	lsls	r3, r3, #10
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x94>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0x94>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0289      	lsls	r1, r1, #10
 8000d20:	430a      	orrs	r2, r1
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0x94>)
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d32:	0021      	movs	r1, r4
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2201      	movs	r2, #1
 8000d50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	187a      	adds	r2, r7, r1
 8000d54:	2390      	movs	r3, #144	; 0x90
 8000d56:	05db      	lsls	r3, r3, #23
 8000d58:	0011      	movs	r1, r2
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 f9bc 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b00b      	add	sp, #44	; 0x2c
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	40021000 	.word	0x40021000

08000d70 <wire_init>:
#include "wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim17);
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <wire_init+0x14>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 f894 	bl	8002ea4 <HAL_TIM_Base_Start>
 8000d7c:	0003      	movs	r3, r0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000098 	.word	0x20000098

08000d88 <delay_us>:

static void delay_us(uint32_t us)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim17, 0);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <delay_us+0x28>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim17) < us) {}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <delay_us+0x28>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d8f9      	bhi.n	8000d9a <delay_us+0x12>
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000098 	.word	0x20000098

08000db4 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	0119      	lsls	r1, r3, #4
 8000dbe:	2390      	movs	r3, #144	; 0x90
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f001 fb0c 	bl	80023e2 <HAL_GPIO_WritePin>
  delay_us(480);
 8000dca:	23f0      	movs	r3, #240	; 0xf0
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ffda 	bl	8000d88 <delay_us>
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	0119      	lsls	r1, r3, #4
 8000dd8:	2390      	movs	r3, #144	; 0x90
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	2201      	movs	r2, #1
 8000dde:	0018      	movs	r0, r3
 8000de0:	f001 faff 	bl	80023e2 <HAL_GPIO_WritePin>
  delay_us(70);
 8000de4:	2046      	movs	r0, #70	; 0x46
 8000de6:	f7ff ffcf 	bl	8000d88 <delay_us>
  rc = HAL_GPIO_ReadPin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin);
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	011a      	lsls	r2, r3, #4
 8000dee:	2390      	movs	r3, #144	; 0x90
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 fad7 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8000dfe:	23cd      	movs	r3, #205	; 0xcd
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff ffc0 	bl	8000d88 <delay_us>

  if (rc == 0)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <wire_reset+0x5e>
    return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <wire_reset+0x60>
  else
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <read_bit>:

static int read_bit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	0119      	lsls	r1, r3, #4
 8000e26:	2390      	movs	r3, #144	; 0x90
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fad8 	bl	80023e2 <HAL_GPIO_WritePin>
  delay_us(6);
 8000e32:	2006      	movs	r0, #6
 8000e34:	f7ff ffa8 	bl	8000d88 <delay_us>
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	0119      	lsls	r1, r3, #4
 8000e3c:	2390      	movs	r3, #144	; 0x90
 8000e3e:	05db      	lsls	r3, r3, #23
 8000e40:	2201      	movs	r2, #1
 8000e42:	0018      	movs	r0, r3
 8000e44:	f001 facd 	bl	80023e2 <HAL_GPIO_WritePin>
  delay_us(9);
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f7ff ff9d 	bl	8000d88 <delay_us>
  rc = HAL_GPIO_ReadPin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin);
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	011a      	lsls	r2, r3, #4
 8000e52:	2390      	movs	r3, #144	; 0x90
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 faa5 	bl	80023a8 <HAL_GPIO_ReadPin>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8000e62:	2037      	movs	r0, #55	; 0x37
 8000e64:	f7ff ff90 	bl	8000d88 <delay_us>
  return rc;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <wire_read>:

uint8_t wire_read(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
  int i;
  for (i = 0; i < 8; i++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	e012      	b.n	8000eaa <wire_read+0x38>
    value >>= 1;
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	1dfa      	adds	r2, r7, #7
 8000e88:	7812      	ldrb	r2, [r2, #0]
 8000e8a:	0852      	lsrs	r2, r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
    if (read_bit())
 8000e8e:	f7ff ffc5 	bl	8000e1c <read_bit>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d006      	beq.n	8000ea4 <wire_read+0x32>
      value |= 0x80;
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	1dfa      	adds	r2, r7, #7
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	4249      	negs	r1, r1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	dde9      	ble.n	8000e84 <wire_read+0x12>
  }
  return value;
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <write_bit>:

static void write_bit(int value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if (value) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d016      	beq.n	8000ef8 <write_bit+0x3c>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	0119      	lsls	r1, r3, #4
 8000ece:	2390      	movs	r3, #144	; 0x90
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 fa84 	bl	80023e2 <HAL_GPIO_WritePin>
    delay_us(6);
 8000eda:	2006      	movs	r0, #6
 8000edc:	f7ff ff54 	bl	8000d88 <delay_us>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	0119      	lsls	r1, r3, #4
 8000ee4:	2390      	movs	r3, #144	; 0x90
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	2201      	movs	r2, #1
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fa79 	bl	80023e2 <HAL_GPIO_WritePin>
    delay_us(64);
 8000ef0:	2040      	movs	r0, #64	; 0x40
 8000ef2:	f7ff ff49 	bl	8000d88 <delay_us>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8000ef6:	e015      	b.n	8000f24 <write_bit+0x68>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	0119      	lsls	r1, r3, #4
 8000efc:	2390      	movs	r3, #144	; 0x90
 8000efe:	05db      	lsls	r3, r3, #23
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f001 fa6d 	bl	80023e2 <HAL_GPIO_WritePin>
    delay_us(60);
 8000f08:	203c      	movs	r0, #60	; 0x3c
 8000f0a:	f7ff ff3d 	bl	8000d88 <delay_us>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	0119      	lsls	r1, r3, #4
 8000f12:	2390      	movs	r3, #144	; 0x90
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	2201      	movs	r2, #1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 fa62 	bl	80023e2 <HAL_GPIO_WritePin>
    delay_us(10);
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f7ff ff32 	bl	8000d88 <delay_us>
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <wire_write>:

void wire_write(uint8_t byte)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	701a      	strb	r2, [r3, #0]
  int i;
  for (i = 0; i < 8; i++) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e00e      	b.n	8000f5c <wire_write+0x30>
    write_bit(byte & 0x01);
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff ffb8 	bl	8000ebc <write_bit>
    byte >>= 1;
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0852      	lsrs	r2, r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	dded      	ble.n	8000f3e <wire_write+0x12>
  }
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	0002      	movs	r2, r0
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	1c0a      	adds	r2, r1, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  int i;
  for (i = 0; i < 8; i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e020      	b.n	8000fc6 <byte_crc+0x5a>
    uint8_t b = crc ^ byte;
 8000f84:	200b      	movs	r0, #11
 8000f86:	183b      	adds	r3, r7, r0
 8000f88:	1df9      	adds	r1, r7, #7
 8000f8a:	1dba      	adds	r2, r7, #6
 8000f8c:	7809      	ldrb	r1, [r1, #0]
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	404a      	eors	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
    crc >>= 1;
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0852      	lsrs	r2, r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
    if (b & 0x01)
 8000f9e:	183b      	adds	r3, r7, r0
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d006      	beq.n	8000fb6 <byte_crc+0x4a>
      crc ^= 0x8c;
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	1dfa      	adds	r2, r7, #7
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	2174      	movs	r1, #116	; 0x74
 8000fb0:	4249      	negs	r1, r1
 8000fb2:	404a      	eors	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
    byte >>= 1;
 8000fb6:	1dbb      	adds	r3, r7, #6
 8000fb8:	1dba      	adds	r2, r7, #6
 8000fba:	7812      	ldrb	r2, [r2, #0]
 8000fbc:	0852      	lsrs	r2, r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	dddb      	ble.n	8000f84 <byte_crc+0x18>
  }
  return crc;
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	781b      	ldrb	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < len; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e010      	b.n	8001012 <wire_crc+0x3a>
      crc = byte_crc(crc, data[i]);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	18d3      	adds	r3, r2, r3
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	230b      	movs	r3, #11
 8000ffa:	18fc      	adds	r4, r7, r3
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ffb2 	bl	8000f6c <byte_crc>
 8001008:	0003      	movs	r3, r0
 800100a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < len; i++)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	dbea      	blt.n	8000ff0 <wire_crc+0x18>

    return crc;
 800101a:	230b      	movs	r3, #11
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	781b      	ldrb	r3, [r3, #0]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b005      	add	sp, #20
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800102a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff fdd7 	bl	8000bde <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001030:	4812      	ldr	r0, [pc, #72]	; (800107c <LoopForever+0x6>)
    LDR R1, [R0]
 8001032:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001034:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <LoopForever+0xa>)
    CMP R1, R2
 8001038:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800103a:	d105      	bne.n	8001048 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800103e:	4912      	ldr	r1, [pc, #72]	; (8001088 <LoopForever+0x12>)
    STR R1, [R0]
 8001040:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001044:	4912      	ldr	r1, [pc, #72]	; (8001090 <LoopForever+0x1a>)
    STR R1, [R0]
 8001046:	6001      	str	r1, [r0, #0]

08001048 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <LoopForever+0x1e>)
  ldr r1, =_edata
 800104a:	4913      	ldr	r1, [pc, #76]	; (8001098 <LoopForever+0x22>)
  ldr r2, =_sidata
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <LoopForever+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001060:	4c10      	ldr	r4, [pc, #64]	; (80010a4 <LoopForever+0x2e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106e:	f002 fb91 	bl	8003794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001072:	f7ff fbe9 	bl	8000848 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   r0, =_estack
 8001078:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800107c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001080:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001084:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001088:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800108c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001090:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800109c:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 80010a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a4:	2000016c 	.word	0x2000016c

080010a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_IRQHandler>
	...

080010ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HAL_Init+0x24>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_Init+0x24>)
 80010b6:	2110      	movs	r1, #16
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f809 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c2:	f7ff fd49 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_InitTick+0x5c>)
 80010de:	681c      	ldr	r4, [r3, #0]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	0019      	movs	r1, r3
 80010e6:	23fa      	movs	r3, #250	; 0xfa
 80010e8:	0098      	lsls	r0, r3, #2
 80010ea:	f7ff f80d 	bl	8000108 <__udivsi3>
 80010ee:	0003      	movs	r3, r0
 80010f0:	0019      	movs	r1, r3
 80010f2:	0020      	movs	r0, r4
 80010f4:	f7ff f808 	bl	8000108 <__udivsi3>
 80010f8:	0003      	movs	r3, r0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 ffdf 	bl	80020be <HAL_SYSTICK_Config>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e00f      	b.n	8001128 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d80b      	bhi.n	8001126 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2301      	movs	r3, #1
 8001112:	425b      	negs	r3, r3
 8001114:	2200      	movs	r2, #0
 8001116:	0018      	movs	r0, r3
 8001118:	f000 ffbc 	bl	8002094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_InitTick+0x64>)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b003      	add	sp, #12
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x1c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	001a      	movs	r2, r3
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	18d2      	adds	r2, r2, r3
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_IncTick+0x20>)
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000008 	.word	0x20000008
 800115c:	20000168 	.word	0x20000168

08001160 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <HAL_GetTick+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	20000168 	.word	0x20000168

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fff0 	bl	8001160 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	001a      	movs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	189b      	adds	r3, r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	f7ff ffe0 	bl	8001160 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b004      	add	sp, #16
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e125      	b.n	8001426 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10a      	bne.n	80011f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2234      	movs	r2, #52	; 0x34
 80011ec:	2100      	movs	r1, #0
 80011ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff f87c 	bl	80002f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	2210      	movs	r2, #16
 80011fe:	4013      	ands	r3, r2
 8001200:	d000      	beq.n	8001204 <HAL_ADC_Init+0x48>
 8001202:	e103      	b.n	800140c <HAL_ADC_Init+0x250>
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d000      	beq.n	8001210 <HAL_ADC_Init+0x54>
 800120e:	e0fd      	b.n	800140c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2204      	movs	r2, #4
 8001218:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800121a:	d000      	beq.n	800121e <HAL_ADC_Init+0x62>
 800121c:	e0f6      	b.n	800140c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a83      	ldr	r2, [pc, #524]	; (8001430 <HAL_ADC_Init+0x274>)
 8001224:	4013      	ands	r3, r2
 8001226:	2202      	movs	r2, #2
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2203      	movs	r2, #3
 8001236:	4013      	ands	r3, r2
 8001238:	2b01      	cmp	r3, #1
 800123a:	d112      	bne.n	8001262 <HAL_ADC_Init+0xa6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2201      	movs	r2, #1
 8001244:	4013      	ands	r3, r2
 8001246:	2b01      	cmp	r3, #1
 8001248:	d009      	beq.n	800125e <HAL_ADC_Init+0xa2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	401a      	ands	r2, r3
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	429a      	cmp	r2, r3
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Init+0xa6>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_ADC_Init+0xa8>
 8001262:	2300      	movs	r3, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d116      	bne.n	8001296 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2218      	movs	r2, #24
 8001270:	4393      	bics	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	0899      	lsrs	r1, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4964      	ldr	r1, [pc, #400]	; (8001434 <HAL_ADC_Init+0x278>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7e1b      	ldrb	r3, [r3, #24]
 80012aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e5b      	ldrb	r3, [r3, #25]
 80012b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7e9b      	ldrb	r3, [r3, #26]
 80012b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d002      	beq.n	80012ca <HAL_ADC_Init+0x10e>
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	e000      	b.n	80012cc <HAL_ADC_Init+0x110>
 80012ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_Init+0x124>
 80012dc:	2304      	movs	r3, #4
 80012de:	e000      	b.n	80012e2 <HAL_ADC_Init+0x126>
 80012e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2124      	movs	r1, #36	; 0x24
 80012e8:	5c5b      	ldrb	r3, [r3, r1]
 80012ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7edb      	ldrb	r3, [r3, #27]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d115      	bne.n	8001328 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e9b      	ldrb	r3, [r3, #26]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	0252      	lsls	r2, r2, #9
 800130a:	4313      	orrs	r3, r2
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	e00b      	b.n	8001328 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001314:	2220      	movs	r2, #32
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001320:	2201      	movs	r2, #1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	23c2      	movs	r3, #194	; 0xc2
 800132e:	33ff      	adds	r3, #255	; 0xff
 8001330:	429a      	cmp	r2, r3
 8001332:	d007      	beq.n	8001344 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800133c:	4313      	orrs	r3, r2
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4313      	orrs	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	055b      	lsls	r3, r3, #21
 800135c:	429a      	cmp	r2, r3
 800135e:	d01b      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b01      	cmp	r3, #1
 8001366:	d017      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2b02      	cmp	r3, #2
 800136e:	d013      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	2b03      	cmp	r3, #3
 8001376:	d00f      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00b      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b05      	cmp	r3, #5
 8001386:	d007      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b06      	cmp	r3, #6
 800138e:	d003      	beq.n	8001398 <HAL_ADC_Init+0x1dc>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	2b07      	cmp	r3, #7
 8001396:	d112      	bne.n	80013be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2107      	movs	r1, #7
 80013a4:	438a      	bics	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6959      	ldr	r1, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	2207      	movs	r2, #7
 80013b4:	401a      	ands	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_ADC_Init+0x27c>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d10b      	bne.n	80013e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2203      	movs	r2, #3
 80013da:	4393      	bics	r3, r2
 80013dc:	2201      	movs	r2, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013e4:	e01c      	b.n	8001420 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	2212      	movs	r2, #18
 80013ec:	4393      	bics	r3, r2
 80013ee:	2210      	movs	r2, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	2201      	movs	r2, #1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001402:	230f      	movs	r3, #15
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800140a:	e009      	b.n	8001420 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001410:	2210      	movs	r2, #16
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	fffffefd 	.word	0xfffffefd
 8001434:	fffe0219 	.word	0xfffe0219
 8001438:	833fffe7 	.word	0x833fffe7

0800143c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001444:	230f      	movs	r3, #15
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d138      	bne.n	80014ca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2234      	movs	r2, #52	; 0x34
 800145c:	5c9b      	ldrb	r3, [r3, r2]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Start+0x2a>
 8001462:	2302      	movs	r3, #2
 8001464:	e038      	b.n	80014d8 <HAL_ADC_Start+0x9c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2234      	movs	r2, #52	; 0x34
 800146a:	2101      	movs	r1, #1
 800146c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7e5b      	ldrb	r3, [r3, #25]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d007      	beq.n	8001486 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001476:	230f      	movs	r3, #15
 8001478:	18fc      	adds	r4, r7, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	0018      	movs	r0, r3
 800147e:	f000 fa2d 	bl	80018dc <ADC_Enable>
 8001482:	0003      	movs	r3, r0
 8001484:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001486:	230f      	movs	r3, #15
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d120      	bne.n	80014d2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_ADC_Start+0xa4>)
 8001496:	4013      	ands	r3, r2
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0052      	lsls	r2, r2, #1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2234      	movs	r2, #52	; 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	221c      	movs	r2, #28
 80014b6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2104      	movs	r1, #4
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e003      	b.n	80014d2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2202      	movs	r2, #2
 80014d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014d2:	230f      	movs	r3, #15
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b005      	add	sp, #20
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	fffff0fe 	.word	0xfffff0fe

080014e4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2234      	movs	r2, #52	; 0x34
 80014f8:	5c9b      	ldrb	r3, [r3, r2]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Stop+0x1e>
 80014fe:	2302      	movs	r3, #2
 8001500:	e029      	b.n	8001556 <HAL_ADC_Stop+0x72>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2234      	movs	r2, #52	; 0x34
 8001506:	2101      	movs	r1, #1
 8001508:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800150a:	250f      	movs	r5, #15
 800150c:	197c      	adds	r4, r7, r5
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	0018      	movs	r0, r3
 8001512:	f000 fad8 	bl	8001ac6 <ADC_ConversionStop>
 8001516:	0003      	movs	r3, r0
 8001518:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800151a:	197b      	adds	r3, r7, r5
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d112      	bne.n	8001548 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001522:	197c      	adds	r4, r7, r5
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0018      	movs	r0, r3
 8001528:	f000 fa5c 	bl	80019e4 <ADC_Disable>
 800152c:	0003      	movs	r3, r0
 800152e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001530:	197b      	adds	r3, r7, r5
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_ADC_Stop+0x7c>)
 800153e:	4013      	ands	r3, r2
 8001540:	2201      	movs	r2, #1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2234      	movs	r2, #52	; 0x34
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001550:	230f      	movs	r3, #15
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	781b      	ldrb	r3, [r3, #0]
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	fffffefe 	.word	0xfffffefe

08001564 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b08      	cmp	r3, #8
 8001574:	d102      	bne.n	800157c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001576:	2308      	movs	r3, #8
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e014      	b.n	80015a6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10b      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	2220      	movs	r2, #32
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2234      	movs	r2, #52	; 0x34
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e071      	b.n	8001686 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015a2:	230c      	movs	r3, #12
 80015a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015a6:	f7ff fddb 	bl	8001160 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015ae:	e01f      	b.n	80015f0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	d01c      	beq.n	80015f0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_ADC_PollForConversion+0x68>
 80015bc:	f7ff fdd0 	bl	8001160 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d211      	bcs.n	80015f0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	d10b      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	2204      	movs	r2, #4
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2234      	movs	r2, #52	; 0x34
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e04a      	b.n	8001686 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0d9      	beq.n	80015b0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	23c0      	movs	r3, #192	; 0xc0
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d12d      	bne.n	8001674 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800161c:	2b00      	cmp	r3, #0
 800161e:	d129      	bne.n	8001674 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2208      	movs	r2, #8
 8001628:	4013      	ands	r3, r2
 800162a:	2b08      	cmp	r3, #8
 800162c:	d122      	bne.n	8001674 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d110      	bne.n	800165c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	210c      	movs	r1, #12
 8001646:	438a      	bics	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_ADC_PollForConversion+0x12c>)
 8001650:	4013      	ands	r3, r2
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
 800165a:	e00b      	b.n	8001674 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	2220      	movs	r2, #32
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	2201      	movs	r2, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e1b      	ldrb	r3, [r3, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d103      	bne.n	8001684 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	220c      	movs	r2, #12
 8001682:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	fffffefe 	.word	0xfffffefe

08001694 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b6:	230f      	movs	r3, #15
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	055b      	lsls	r3, r3, #21
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d011      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x46>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d00d      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x46>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d009      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x46>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d005      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x46>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d001      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x46>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2234      	movs	r2, #52	; 0x34
 80016f6:	5c9b      	ldrb	r3, [r3, r2]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x54>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e0d0      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x1f6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2234      	movs	r2, #52	; 0x34
 8001704:	2101      	movs	r1, #1
 8001706:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2204      	movs	r2, #4
 8001710:	4013      	ands	r3, r2
 8001712:	d000      	beq.n	8001716 <HAL_ADC_ConfigChannel+0x6a>
 8001714:	e0b4      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a64      	ldr	r2, [pc, #400]	; (80018ac <HAL_ADC_ConfigChannel+0x200>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x76>
 8001720:	e082      	b.n	8001828 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	055b      	lsls	r3, r3, #21
 8001740:	429a      	cmp	r2, r3
 8001742:	d037      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	2b01      	cmp	r3, #1
 800174a:	d033      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b02      	cmp	r3, #2
 8001752:	d02f      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	2b03      	cmp	r3, #3
 800175a:	d02b      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b04      	cmp	r3, #4
 8001762:	d027      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	2b05      	cmp	r3, #5
 800176a:	d023      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b06      	cmp	r3, #6
 8001772:	d01f      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b07      	cmp	r3, #7
 800177a:	d01b      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2107      	movs	r1, #7
 8001788:	400b      	ands	r3, r1
 800178a:	429a      	cmp	r2, r3
 800178c:	d012      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2107      	movs	r1, #7
 800179a:	438a      	bics	r2, r1
 800179c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6959      	ldr	r1, [r3, #20]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2207      	movs	r2, #7
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d007      	beq.n	80017cc <HAL_ADC_ConfigChannel+0x120>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d003      	beq.n	80017cc <HAL_ADC_ConfigChannel+0x120>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b12      	cmp	r3, #18
 80017ca:	d163      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_ADC_ConfigChannel+0x204>)
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d009      	beq.n	80017ec <HAL_ADC_ConfigChannel+0x140>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d102      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x13a>
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	03db      	lsls	r3, r3, #15
 80017e4:	e004      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x144>
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	045b      	lsls	r3, r3, #17
 80017ea:	e001      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x144>
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	4a2f      	ldr	r2, [pc, #188]	; (80018b0 <HAL_ADC_ConfigChannel+0x204>)
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d14a      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_ADC_ConfigChannel+0x208>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	492d      	ldr	r1, [pc, #180]	; (80018b8 <HAL_ADC_ConfigChannel+0x20c>)
 8001804:	0018      	movs	r0, r3
 8001806:	f7fe fc7f 	bl	8000108 <__udivsi3>
 800180a:	0003      	movs	r3, r0
 800180c:	001a      	movs	r2, r3
 800180e:	0013      	movs	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	189b      	adds	r3, r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001818:	e002      	b.n	8001820 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3b01      	subs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_ConfigChannel+0x16e>
 8001826:	e035      	b.n	8001894 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	4099      	lsls	r1, r3
 8001836:	000b      	movs	r3, r1
 8001838:	43d9      	mvns	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d007      	beq.n	800185a <HAL_ADC_ConfigChannel+0x1ae>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b11      	cmp	r3, #17
 8001850:	d003      	beq.n	800185a <HAL_ADC_ConfigChannel+0x1ae>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b12      	cmp	r3, #18
 8001858:	d11c      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_ADC_ConfigChannel+0x204>)
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d007      	beq.n	8001876 <HAL_ADC_ConfigChannel+0x1ca>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b11      	cmp	r3, #17
 800186c:	d101      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x1c6>
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_ADC_ConfigChannel+0x210>)
 8001870:	e002      	b.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_ADC_ConfigChannel+0x214>)
 8001874:	e000      	b.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_ADC_ConfigChannel+0x218>)
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_ADC_ConfigChannel+0x204>)
 800187a:	400b      	ands	r3, r1
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e009      	b.n	8001894 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001884:	2220      	movs	r2, #32
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2234      	movs	r2, #52	; 0x34
 8001898:	2100      	movs	r1, #0
 800189a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800189c:	230f      	movs	r3, #15
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	781b      	ldrb	r3, [r3, #0]
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	00001001 	.word	0x00001001
 80018b0:	40012708 	.word	0x40012708
 80018b4:	20000000 	.word	0x20000000
 80018b8:	000f4240 	.word	0x000f4240
 80018bc:	ffbfffff 	.word	0xffbfffff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	ff7fffff 	.word	0xff7fffff

080018c8 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}

080018dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2203      	movs	r2, #3
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d112      	bne.n	8001920 <ADC_Enable+0x44>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	2b01      	cmp	r3, #1
 8001906:	d009      	beq.n	800191c <ADC_Enable+0x40>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	401a      	ands	r2, r3
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	429a      	cmp	r2, r3
 800191a:	d101      	bne.n	8001920 <ADC_Enable+0x44>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <ADC_Enable+0x46>
 8001920:	2300      	movs	r3, #0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d152      	bne.n	80019cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a2a      	ldr	r2, [pc, #168]	; (80019d8 <ADC_Enable+0xfc>)
 800192e:	4013      	ands	r3, r2
 8001930:	d00d      	beq.n	800194e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	2210      	movs	r2, #16
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	2201      	movs	r2, #1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e03f      	b.n	80019ce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <ADC_Enable+0x100>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	491f      	ldr	r1, [pc, #124]	; (80019e0 <ADC_Enable+0x104>)
 8001964:	0018      	movs	r0, r3
 8001966:	f7fe fbcf 	bl	8000108 <__udivsi3>
 800196a:	0003      	movs	r3, r0
 800196c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800196e:	e002      	b.n	8001976 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3b01      	subs	r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800197c:	f7ff fbf0 	bl	8001160 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001984:	e01b      	b.n	80019be <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001986:	f7ff fbeb 	bl	8001160 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d914      	bls.n	80019be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d00d      	beq.n	80019be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	2210      	movs	r2, #16
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	2201      	movs	r2, #1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e007      	b.n	80019ce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d1dc      	bne.n	8001986 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b004      	add	sp, #16
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	80000017 	.word	0x80000017
 80019dc:	20000000 	.word	0x20000000
 80019e0:	000f4240 	.word	0x000f4240

080019e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2203      	movs	r2, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d112      	bne.n	8001a24 <ADC_Disable+0x40>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d009      	beq.n	8001a20 <ADC_Disable+0x3c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	401a      	ands	r2, r3
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d101      	bne.n	8001a24 <ADC_Disable+0x40>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <ADC_Disable+0x42>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d048      	beq.n	8001abc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2205      	movs	r2, #5
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d110      	bne.n	8001a5a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2102      	movs	r1, #2
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a50:	f7ff fb86 	bl	8001160 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a58:	e029      	b.n	8001aae <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	2210      	movs	r2, #16
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e023      	b.n	8001abe <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a76:	f7ff fb73 	bl	8001160 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d914      	bls.n	8001aae <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10d      	bne.n	8001aae <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	2210      	movs	r2, #16
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e007      	b.n	8001abe <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d0dc      	beq.n	8001a76 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	4013      	ands	r3, r2
 8001adc:	d03a      	beq.n	8001b54 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d10d      	bne.n	8001b08 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001af6:	d107      	bne.n	8001b08 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2110      	movs	r1, #16
 8001b04:	430a      	orrs	r2, r1
 8001b06:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b08:	f7ff fb2a 	bl	8001160 <HAL_GetTick>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b10:	e01a      	b.n	8001b48 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b12:	f7ff fb25 	bl	8001160 <HAL_GetTick>
 8001b16:	0002      	movs	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d913      	bls.n	8001b48 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2204      	movs	r2, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d00d      	beq.n	8001b48 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	2210      	movs	r2, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e006      	b.n	8001b56 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	4013      	ands	r3, r2
 8001b52:	d1de      	bne.n	8001b12 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b004      	add	sp, #16
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0f0      	b.n	8001d52 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7fe fc34 	bl	80003ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b94:	f7ff fae4 	bl	8001160 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b9c:	e013      	b.n	8001bc6 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9e:	f7ff fadf 	bl	8001160 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b0a      	cmp	r3, #10
 8001baa:	d90c      	bls.n	8001bc6 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0292      	lsls	r2, r2, #10
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0c5      	b.n	8001d52 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0e5      	beq.n	8001b9e <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2102      	movs	r1, #2
 8001bde:	438a      	bics	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be2:	f7ff fabd 	bl	8001160 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bea:	e013      	b.n	8001c14 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bec:	f7ff fab8 	bl	8001160 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d90c      	bls.n	8001c14 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0292      	lsls	r2, r2, #10
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e09e      	b.n	8001d52 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d1e5      	bne.n	8001bec <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e1b      	ldrb	r3, [r3, #24]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e007      	b.n	8001c4a <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	438a      	bics	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7e5b      	ldrb	r3, [r3, #25]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2140      	movs	r1, #64	; 0x40
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e9b      	ldrb	r3, [r3, #26]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2120      	movs	r1, #32
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e007      	b.n	8001c9e <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2120      	movs	r1, #32
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7edb      	ldrb	r3, [r3, #27]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e007      	b.n	8001cc8 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7f1b      	ldrb	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2108      	movs	r1, #8
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e007      	b.n	8001cf2 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2108      	movs	r1, #8
 8001cee:	438a      	bics	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7f5b      	ldrb	r3, [r3, #29]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d108      	bne.n	8001d0c <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2104      	movs	r1, #4
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e007      	b.n	8001d1c <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2104      	movs	r1, #4
 8001d18:	438a      	bics	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	0011      	movs	r1, r2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b088      	sub	sp, #32
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d68:	201f      	movs	r0, #31
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	2120      	movs	r1, #32
 8001d70:	5c52      	ldrb	r2, [r2, r1]
 8001d72:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7c:	183b      	adds	r3, r7, r0
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d004      	beq.n	8001d8e <HAL_CAN_AddTxMessage+0x34>
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d000      	beq.n	8001d8e <HAL_CAN_AddTxMessage+0x34>
 8001d8c:	e0ab      	b.n	8001ee6 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	04db      	lsls	r3, r3, #19
 8001d94:	4013      	ands	r3, r2
 8001d96:	d10a      	bne.n	8001dae <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	051b      	lsls	r3, r3, #20
 8001d9e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001da0:	d105      	bne.n	8001dae <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	055b      	lsls	r3, r3, #21
 8001da8:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001daa:	d100      	bne.n	8001dae <HAL_CAN_AddTxMessage+0x54>
 8001dac:	e092      	b.n	8001ed4 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	0e1b      	lsrs	r3, r3, #24
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001db8:	2201      	movs	r2, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4311      	orrs	r1, r2
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	3218      	adds	r2, #24
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	50d1      	str	r1, [r2, r3]
 8001de2:	e00f      	b.n	8001e04 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dee:	431a      	orrs	r2, r3
 8001df0:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001dfa:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	3218      	adds	r2, #24
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	18cb      	adds	r3, r1, r3
 8001e14:	3304      	adds	r3, #4
 8001e16:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	7d1b      	ldrb	r3, [r3, #20]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d112      	bne.n	8001e46 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3318      	adds	r3, #24
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	18cb      	adds	r3, r1, r3
 8001e42:	3304      	adds	r3, #4
 8001e44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3307      	adds	r3, #7
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	061a      	lsls	r2, r3, #24
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3306      	adds	r3, #6
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3305      	adds	r3, #5
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	0019      	movs	r1, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	23c6      	movs	r3, #198	; 0xc6
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	0109      	lsls	r1, r1, #4
 8001e78:	1841      	adds	r1, r0, r1
 8001e7a:	18cb      	adds	r3, r1, r3
 8001e7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3303      	adds	r3, #3
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	061a      	lsls	r2, r3, #24
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	6979      	ldr	r1, [r7, #20]
 8001ea8:	23c4      	movs	r3, #196	; 0xc4
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	0109      	lsls	r1, r1, #4
 8001eae:	1841      	adds	r1, r0, r1
 8001eb0:	18cb      	adds	r3, r1, r3
 8001eb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	3218      	adds	r2, #24
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	58d2      	ldr	r2, [r2, r3]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4311      	orrs	r1, r2
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	3218      	adds	r2, #24
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e010      	b.n	8001ef6 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	0392      	lsls	r2, r2, #14
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e007      	b.n	8001ef6 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	02d2      	lsls	r2, r2, #11
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
  }
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b008      	add	sp, #32
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0a:	200b      	movs	r0, #11
 8001f0c:	183b      	adds	r3, r7, r0
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	2120      	movs	r1, #32
 8001f12:	5c52      	ldrb	r2, [r2, r1]
 8001f14:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f16:	0002      	movs	r2, r0
 8001f18:	18bb      	adds	r3, r7, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d003      	beq.n	8001f28 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8001f20:	18bb      	adds	r3, r7, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d11d      	bne.n	8001f64 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	04db      	lsls	r3, r3, #19
 8001f32:	4013      	ands	r3, r2
 8001f34:	d002      	beq.n	8001f3c <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	051b      	lsls	r3, r3, #20
 8001f46:	4013      	ands	r3, r2
 8001f48:	d002      	beq.n	8001f50 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f64:	68fb      	ldr	r3, [r7, #12]
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b7f      	cmp	r3, #127	; 0x7f
 8001f84:	d828      	bhi.n	8001fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <__NVIC_SetPriority+0xd4>)
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	33c0      	adds	r3, #192	; 0xc0
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	589b      	ldr	r3, [r3, r2]
 8001f96:	1dfa      	adds	r2, r7, #7
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	00d2      	lsls	r2, r2, #3
 8001fa2:	21ff      	movs	r1, #255	; 0xff
 8001fa4:	4091      	lsls	r1, r2
 8001fa6:	000a      	movs	r2, r1
 8001fa8:	43d2      	mvns	r2, r2
 8001faa:	401a      	ands	r2, r3
 8001fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	22ff      	movs	r2, #255	; 0xff
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	4003      	ands	r3, r0
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc4:	481f      	ldr	r0, [pc, #124]	; (8002044 <__NVIC_SetPriority+0xd4>)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	33c0      	adds	r3, #192	; 0xc0
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fd6:	e031      	b.n	800203c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <__NVIC_SetPriority+0xd8>)
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0019      	movs	r1, r3
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	3b08      	subs	r3, #8
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3306      	adds	r3, #6
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	3304      	adds	r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1dfa      	adds	r2, r7, #7
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	00d2      	lsls	r2, r2, #3
 8001ffe:	21ff      	movs	r1, #255	; 0xff
 8002000:	4091      	lsls	r1, r2
 8002002:	000a      	movs	r2, r1
 8002004:	43d2      	mvns	r2, r2
 8002006:	401a      	ands	r2, r3
 8002008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	22ff      	movs	r2, #255	; 0xff
 8002010:	401a      	ands	r2, r3
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	2303      	movs	r3, #3
 800201a:	4003      	ands	r3, r0
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <__NVIC_SetPriority+0xd8>)
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	001c      	movs	r4, r3
 8002028:	230f      	movs	r3, #15
 800202a:	4023      	ands	r3, r4
 800202c:	3b08      	subs	r3, #8
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	430a      	orrs	r2, r1
 8002032:	3306      	adds	r3, #6
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	18c3      	adds	r3, r0, r3
 8002038:	3304      	adds	r3, #4
 800203a:	601a      	str	r2, [r3, #0]
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b003      	add	sp, #12
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	045b      	lsls	r3, r3, #17
 800205c:	429a      	cmp	r2, r3
 800205e:	d301      	bcc.n	8002064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002060:	2301      	movs	r3, #1
 8002062:	e010      	b.n	8002086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <SysTick_Config+0x44>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	3a01      	subs	r2, #1
 800206a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206c:	2301      	movs	r3, #1
 800206e:	425b      	negs	r3, r3
 8002070:	2103      	movs	r1, #3
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff ff7c 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x44>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x44>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	210f      	movs	r1, #15
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	1c02      	adds	r2, r0, #0
 80020a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	0011      	movs	r1, r2
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b004      	add	sp, #16
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ffbf 	bl	800204c <SysTick_Config>
 80020ce:	0003      	movs	r3, r0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e6:	e149      	b.n	800237c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4091      	lsls	r1, r2
 80020f2:	000a      	movs	r2, r1
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d100      	bne.n	8002100 <HAL_GPIO_Init+0x28>
 80020fe:	e13a      	b.n	8002376 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	4013      	ands	r3, r2
 8002108:	2b01      	cmp	r3, #1
 800210a:	d005      	beq.n	8002118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002114:	2b02      	cmp	r3, #2
 8002116:	d130      	bne.n	800217a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	43da      	mvns	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	0013      	movs	r3, r2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214e:	2201      	movs	r2, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	43da      	mvns	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	2201      	movs	r2, #1
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	4013      	ands	r3, r2
 8002182:	2b03      	cmp	r3, #3
 8002184:	d017      	beq.n	80021b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	43da      	mvns	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d123      	bne.n	800220a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	58d3      	ldr	r3, [r2, r3]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2207      	movs	r2, #7
 80021d4:	4013      	ands	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	43da      	mvns	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2107      	movs	r1, #7
 80021ee:	400b      	ands	r3, r1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	6939      	ldr	r1, [r7, #16]
 8002208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	43da      	mvns	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	401a      	ands	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	23c0      	movs	r3, #192	; 0xc0
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_GPIO_Init+0x174>
 800224a:	e094      	b.n	8002376 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224c:	4b51      	ldr	r3, [pc, #324]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
 8002258:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002264:	4a4c      	ldr	r2, [pc, #304]	; (8002398 <HAL_GPIO_Init+0x2c0>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	589b      	ldr	r3, [r3, r2]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2203      	movs	r2, #3
 8002276:	4013      	ands	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	409a      	lsls	r2, r3
 800227e:	0013      	movs	r3, r2
 8002280:	43da      	mvns	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2390      	movs	r3, #144	; 0x90
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	429a      	cmp	r2, r3
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x1d6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a41      	ldr	r2, [pc, #260]	; (800239c <HAL_GPIO_Init+0x2c4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x1d2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a40      	ldr	r2, [pc, #256]	; (80023a0 <HAL_GPIO_Init+0x2c8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x1ce>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x1d8>
 80022a6:	2305      	movs	r3, #5
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x1d8>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x1d8>
 80022ae:	2300      	movs	r3, #0
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	2103      	movs	r1, #3
 80022b4:	400a      	ands	r2, r1
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_GPIO_Init+0x2c0>)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43da      	mvns	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	035b      	lsls	r3, r3, #13
 80022e6:	4013      	ands	r3, r2
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022f8:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43da      	mvns	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	039b      	lsls	r3, r3, #14
 8002310:	4013      	ands	r3, r2
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43da      	mvns	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	4013      	ands	r3, r2
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43da      	mvns	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	4013      	ands	r3, r2
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	40da      	lsrs	r2, r3
 8002384:	1e13      	subs	r3, r2, #0
 8002386:	d000      	beq.n	800238a <HAL_GPIO_Init+0x2b2>
 8002388:	e6ae      	b.n	80020e8 <HAL_GPIO_Init+0x10>
  } 
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	40010000 	.word	0x40010000
 800239c:	48000400 	.word	0x48000400
 80023a0:	48000800 	.word	0x48000800
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	1cba      	adds	r2, r7, #2
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
  }
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	0008      	movs	r0, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	1c02      	adds	r2, r0, #0
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	1c7b      	adds	r3, r7, #1
 80023f6:	1c0a      	adds	r2, r1, #0
 80023f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fa:	1c7b      	adds	r3, r7, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800240a:	e003      	b.n	8002414 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800240c:	1cbb      	adds	r3, r7, #2
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	f000 fb76 	bl	8002b1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d100      	bne.n	800243c <HAL_RCC_OscConfig+0x20>
 800243a:	e08e      	b.n	800255a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800243c:	4bc5      	ldr	r3, [pc, #788]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	220c      	movs	r2, #12
 8002442:	4013      	ands	r3, r2
 8002444:	2b04      	cmp	r3, #4
 8002446:	d00e      	beq.n	8002466 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002448:	4bc2      	ldr	r3, [pc, #776]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	220c      	movs	r2, #12
 800244e:	4013      	ands	r3, r2
 8002450:	2b08      	cmp	r3, #8
 8002452:	d117      	bne.n	8002484 <HAL_RCC_OscConfig+0x68>
 8002454:	4bbf      	ldr	r3, [pc, #764]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	23c0      	movs	r3, #192	; 0xc0
 800245a:	025b      	lsls	r3, r3, #9
 800245c:	401a      	ands	r2, r3
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	429a      	cmp	r2, r3
 8002464:	d10e      	bne.n	8002484 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002466:	4bbb      	ldr	r3, [pc, #748]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	029b      	lsls	r3, r3, #10
 800246e:	4013      	ands	r3, r2
 8002470:	d100      	bne.n	8002474 <HAL_RCC_OscConfig+0x58>
 8002472:	e071      	b.n	8002558 <HAL_RCC_OscConfig+0x13c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d000      	beq.n	800247e <HAL_RCC_OscConfig+0x62>
 800247c:	e06c      	b.n	8002558 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f000 fb4c 	bl	8002b1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x80>
 800248c:	4bb1      	ldr	r3, [pc, #708]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4bb0      	ldr	r3, [pc, #704]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0249      	lsls	r1, r1, #9
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e02f      	b.n	80024fc <HAL_RCC_OscConfig+0xe0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0xa2>
 80024a4:	4bab      	ldr	r3, [pc, #684]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4baa      	ldr	r3, [pc, #680]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024aa:	49ab      	ldr	r1, [pc, #684]	; (8002758 <HAL_RCC_OscConfig+0x33c>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	4ba8      	ldr	r3, [pc, #672]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4ba7      	ldr	r3, [pc, #668]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024b6:	49a9      	ldr	r1, [pc, #676]	; (800275c <HAL_RCC_OscConfig+0x340>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e01e      	b.n	80024fc <HAL_RCC_OscConfig+0xe0>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d10e      	bne.n	80024e4 <HAL_RCC_OscConfig+0xc8>
 80024c6:	4ba3      	ldr	r3, [pc, #652]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4ba2      	ldr	r3, [pc, #648]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	02c9      	lsls	r1, r1, #11
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	4b9f      	ldr	r3, [pc, #636]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b9e      	ldr	r3, [pc, #632]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0249      	lsls	r1, r1, #9
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0xe0>
 80024e4:	4b9b      	ldr	r3, [pc, #620]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b9a      	ldr	r3, [pc, #616]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024ea:	499b      	ldr	r1, [pc, #620]	; (8002758 <HAL_RCC_OscConfig+0x33c>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	4b98      	ldr	r3, [pc, #608]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b97      	ldr	r3, [pc, #604]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80024f6:	4999      	ldr	r1, [pc, #612]	; (800275c <HAL_RCC_OscConfig+0x340>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d014      	beq.n	800252e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe2c 	bl	8001160 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250e:	f7fe fe27 	bl	8001160 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e2fd      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0xf2>
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fe17 	bl	8001160 <HAL_GetTick>
 8002532:	0003      	movs	r3, r0
 8002534:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fe12 	bl	8001160 <HAL_GetTick>
 800253c:	0002      	movs	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e2e8      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	029b      	lsls	r3, r3, #10
 8002552:	4013      	ands	r3, r2
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x11c>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d100      	bne.n	8002566 <HAL_RCC_OscConfig+0x14a>
 8002564:	e06c      	b.n	8002640 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002566:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	220c      	movs	r2, #12
 800256c:	4013      	ands	r3, r2
 800256e:	d00e      	beq.n	800258e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002570:	4b78      	ldr	r3, [pc, #480]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	220c      	movs	r2, #12
 8002576:	4013      	ands	r3, r2
 8002578:	2b08      	cmp	r3, #8
 800257a:	d11f      	bne.n	80025bc <HAL_RCC_OscConfig+0x1a0>
 800257c:	4b75      	ldr	r3, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	23c0      	movs	r3, #192	; 0xc0
 8002582:	025b      	lsls	r3, r3, #9
 8002584:	401a      	ands	r2, r3
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	429a      	cmp	r2, r3
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x188>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e2bb      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	22f8      	movs	r2, #248	; 0xf8
 80025aa:	4393      	bics	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00da      	lsls	r2, r3, #3
 80025b4:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e041      	b.n	8002640 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d024      	beq.n	800260e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe fdc6 	bl	8001160 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe fdc1 	bl	8001160 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e297      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	4b59      	ldr	r3, [pc, #356]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d0f1      	beq.n	80025da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	22f8      	movs	r2, #248	; 0xf8
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	00da      	lsls	r2, r3, #3
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e018      	b.n	8002640 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260e:	4b51      	ldr	r3, [pc, #324]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002614:	2101      	movs	r1, #1
 8002616:	438a      	bics	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fda1 	bl	8001160 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe fd9c 	bl	8001160 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e272      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d1f1      	bne.n	8002624 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2208      	movs	r2, #8
 8002646:	4013      	ands	r3, r2
 8002648:	d036      	beq.n	80026b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7fe fd7f 	bl	8001160 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002668:	f7fe fd7a 	bl	8001160 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e250      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	d0f1      	beq.n	8002668 <HAL_RCC_OscConfig+0x24c>
 8002684:	e018      	b.n	80026b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800268c:	2101      	movs	r1, #1
 800268e:	438a      	bics	r2, r1
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7fe fd65 	bl	8001160 <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fd60 	bl	8001160 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e236      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	d1f1      	bne.n	800269c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2204      	movs	r2, #4
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2a8>
 80026c2:	e0b5      	b.n	8002830 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c4:	201f      	movs	r0, #31
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	4013      	ands	r3, r2
 80026d6:	d110      	bne.n	80026fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0549      	lsls	r1, r1, #21
 80026e2:	430a      	orrs	r2, r1
 80026e4:	61da      	str	r2, [r3, #28]
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	055b      	lsls	r3, r3, #21
 80026ee:	4013      	ands	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_OscConfig+0x344>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d11a      	bne.n	800273c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_RCC_OscConfig+0x344>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_RCC_OscConfig+0x344>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0049      	lsls	r1, r1, #1
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002714:	f7fe fd24 	bl	8001160 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe fd1f 	bl	8001160 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1f5      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x344>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10f      	bne.n	8002764 <HAL_RCC_OscConfig+0x348>
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <HAL_RCC_OscConfig+0x338>)
 800274a:	2101      	movs	r1, #1
 800274c:	430a      	orrs	r2, r1
 800274e:	621a      	str	r2, [r3, #32]
 8002750:	e036      	b.n	80027c0 <HAL_RCC_OscConfig+0x3a4>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40021000 	.word	0x40021000
 8002758:	fffeffff 	.word	0xfffeffff
 800275c:	fffbffff 	.word	0xfffbffff
 8002760:	40007000 	.word	0x40007000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0x36a>
 800276c:	4bca      	ldr	r3, [pc, #808]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800276e:	6a1a      	ldr	r2, [r3, #32]
 8002770:	4bc9      	ldr	r3, [pc, #804]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002772:	2101      	movs	r1, #1
 8002774:	438a      	bics	r2, r1
 8002776:	621a      	str	r2, [r3, #32]
 8002778:	4bc7      	ldr	r3, [pc, #796]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	4bc6      	ldr	r3, [pc, #792]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800277e:	2104      	movs	r1, #4
 8002780:	438a      	bics	r2, r1
 8002782:	621a      	str	r2, [r3, #32]
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x3a4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x38c>
 800278e:	4bc2      	ldr	r3, [pc, #776]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	4bc1      	ldr	r3, [pc, #772]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002794:	2104      	movs	r1, #4
 8002796:	430a      	orrs	r2, r1
 8002798:	621a      	str	r2, [r3, #32]
 800279a:	4bbf      	ldr	r3, [pc, #764]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	4bbe      	ldr	r3, [pc, #760]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	621a      	str	r2, [r3, #32]
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x3a4>
 80027a8:	4bbb      	ldr	r3, [pc, #748]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	4bba      	ldr	r3, [pc, #744]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	621a      	str	r2, [r3, #32]
 80027b4:	4bb8      	ldr	r3, [pc, #736]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	4bb7      	ldr	r3, [pc, #732]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80027ba:	2104      	movs	r1, #4
 80027bc:	438a      	bics	r2, r1
 80027be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d014      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fcca 	bl	8001160 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fcc5 	bl	8001160 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4aaf      	ldr	r2, [pc, #700]	; (8002a9c <HAL_RCC_OscConfig+0x680>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e19a      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	4bac      	ldr	r3, [pc, #688]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3b6>
 80027f0:	e013      	b.n	800281a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fcb5 	bl	8001160 <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	e009      	b.n	8002810 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fcb0 	bl	8001160 <HAL_GetTick>
 8002800:	0002      	movs	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	4aa5      	ldr	r2, [pc, #660]	; (8002a9c <HAL_RCC_OscConfig+0x680>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e185      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	4ba1      	ldr	r3, [pc, #644]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	2202      	movs	r2, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800281a:	231f      	movs	r3, #31
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b9c      	ldr	r3, [pc, #624]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	4b9b      	ldr	r3, [pc, #620]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800282a:	499d      	ldr	r1, [pc, #628]	; (8002aa0 <HAL_RCC_OscConfig+0x684>)
 800282c:	400a      	ands	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2210      	movs	r2, #16
 8002836:	4013      	ands	r3, r2
 8002838:	d063      	beq.n	8002902 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d12a      	bne.n	8002898 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002842:	4b95      	ldr	r3, [pc, #596]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002846:	4b94      	ldr	r3, [pc, #592]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002848:	2104      	movs	r1, #4
 800284a:	430a      	orrs	r2, r1
 800284c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800284e:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002852:	4b91      	ldr	r3, [pc, #580]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe fc81 	bl	8001160 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002864:	f7fe fc7c 	bl	8001160 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e152      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d0f1      	beq.n	8002864 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002880:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	22f8      	movs	r2, #248	; 0xf8
 8002886:	4393      	bics	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	00da      	lsls	r2, r3, #3
 8002890:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002892:	430a      	orrs	r2, r1
 8002894:	635a      	str	r2, [r3, #52]	; 0x34
 8002896:	e034      	b.n	8002902 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	3305      	adds	r3, #5
 800289e:	d111      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028a0:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	4b7c      	ldr	r3, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028a6:	2104      	movs	r1, #4
 80028a8:	438a      	bics	r2, r1
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028ac:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	22f8      	movs	r2, #248	; 0xf8
 80028b2:	4393      	bics	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	00da      	lsls	r2, r3, #3
 80028bc:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	e01e      	b.n	8002902 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c8:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028ca:	2104      	movs	r1, #4
 80028cc:	430a      	orrs	r2, r1
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028d0:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d4:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	438a      	bics	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fe fc40 	bl	8001160 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028e6:	f7fe fc3b 	bl	8001160 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e111      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d1f1      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2220      	movs	r2, #32
 8002908:	4013      	ands	r3, r2
 800290a:	d05c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	220c      	movs	r2, #12
 8002912:	4013      	ands	r3, r2
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d00e      	beq.n	8002936 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	220c      	movs	r2, #12
 800291e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002920:	2b08      	cmp	r3, #8
 8002922:	d114      	bne.n	800294e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002924:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	401a      	ands	r2, r3
 800292e:	23c0      	movs	r3, #192	; 0xc0
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	429a      	cmp	r2, r3
 8002934:	d10b      	bne.n	800294e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	029b      	lsls	r3, r3, #10
 800293e:	4013      	ands	r3, r2
 8002940:	d040      	beq.n	80029c4 <HAL_RCC_OscConfig+0x5a8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d03c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0e6      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01b      	beq.n	800298e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002956:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	4b4f      	ldr	r3, [pc, #316]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0249      	lsls	r1, r1, #9
 8002960:	430a      	orrs	r2, r1
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fbfc 	bl	8001160 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296e:	f7fe fbf7 	bl	8001160 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e0cd      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002980:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x552>
 800298c:	e01b      	b.n	80029c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800298e:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002994:	4943      	ldr	r1, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x688>)
 8002996:	400a      	ands	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fbe1 	bl	8001160 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a4:	f7fe fbdc 	bl	8001160 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0b2      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80029b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	4013      	ands	r3, r2
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x588>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d100      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5b4>
 80029ce:	e0a4      	b.n	8002b1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	220c      	movs	r2, #12
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d100      	bne.n	80029de <HAL_RCC_OscConfig+0x5c2>
 80029dc:	e078      	b.n	8002ad0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d14c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 80029ec:	492e      	ldr	r1, [pc, #184]	; (8002aa8 <HAL_RCC_OscConfig+0x68c>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fbb5 	bl	8001160 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fbb0 	bl	8001160 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e086      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	049b      	lsls	r3, r3, #18
 8002a16:	4013      	ands	r3, r2
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	220f      	movs	r2, #15
 8002a20:	4393      	bics	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_RCC_OscConfig+0x690>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	431a      	orrs	r2, r3
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0449      	lsls	r1, r1, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fb83 	bl	8001160 <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fb7e 	bl	8001160 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	049b      	lsls	r3, r3, #18
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x644>
 8002a7e:	e04c      	b.n	8002b1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_RCC_OscConfig+0x67c>)
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <HAL_RCC_OscConfig+0x68c>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fb68 	bl	8001160 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x6a6>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	00001388 	.word	0x00001388
 8002aa0:	efffffff 	.word	0xefffffff
 8002aa4:	fffeffff 	.word	0xfffeffff
 8002aa8:	feffffff 	.word	0xfeffffff
 8002aac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fb56 	bl	8001160 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e02c      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_RCC_OscConfig+0x708>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	049b      	lsls	r3, r3, #18
 8002aca:	4013      	ands	r3, r2
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x694>
 8002ace:	e024      	b.n	8002b1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e01f      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_RCC_OscConfig+0x708>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x708>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	23c0      	movs	r3, #192	; 0xc0
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	401a      	ands	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d10e      	bne.n	8002b16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	220f      	movs	r2, #15
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	23f0      	movs	r3, #240	; 0xf0
 8002b0a:	039b      	lsls	r3, r3, #14
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b008      	add	sp, #32
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0bf      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d911      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4393      	bics	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0a6      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d006      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b82:	4b51      	ldr	r3, [pc, #324]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b88:	21e0      	movs	r1, #224	; 0xe0
 8002b8a:	00c9      	lsls	r1, r1, #3
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	22f0      	movs	r2, #240	; 0xf0
 8002b96:	4393      	bics	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d04c      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d120      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07a      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	049b      	lsls	r3, r3, #18
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d114      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06e      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e062      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e05b      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c04:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c18:	f7fe faa2 	bl	8001160 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c22:	f7fe fa9d 	bl	8001160 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <HAL_RCC_ClockConfig+0x1a4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e042      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ec      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d211      	bcs.n	8002c7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x19c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e020      	b.n	8002cbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	d009      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_RCC_ClockConfig+0x1a8>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c98:	f000 f820 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9c:	0001      	movs	r1, r0
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <HAL_RCC_ClockConfig+0x1ac>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	000a      	movs	r2, r1
 8002cae:	40da      	lsrs	r2, r3
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f7fe fa0d 	bl	80010d4 <HAL_InitTick>
  
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	00001388 	.word	0x00001388
 8002cd0:	fffff8ff 	.word	0xfffff8ff
 8002cd4:	0800382c 	.word	0x0800382c
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	220c      	movs	r2, #12
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d046      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d06:	d848      	bhi.n	8002d9a <HAL_RCC_GetSysClockFreq+0xbe>
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d002      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d003      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x3c>
 8002d10:	e043      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d14:	613b      	str	r3, [r7, #16]
      break;
 8002d16:	e043      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	4013      	ands	r3, r2
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	23c0      	movs	r3, #192	; 0xc0
 8002d38:	025b      	lsls	r3, r3, #9
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	025b      	lsls	r3, r3, #9
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d109      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	481a      	ldr	r0, [pc, #104]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d48:	f7fd f9de 	bl	8000108 <__udivsi3>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	001a      	movs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4353      	muls	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e01a      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	23c0      	movs	r3, #192	; 0xc0
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	401a      	ands	r2, r3
 8002d60:	23c0      	movs	r3, #192	; 0xc0
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d109      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	4814      	ldr	r0, [pc, #80]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d6c:	f7fd f9cc 	bl	8000108 <__udivsi3>
 8002d70:	0003      	movs	r3, r0
 8002d72:	001a      	movs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4353      	muls	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	4810      	ldr	r0, [pc, #64]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002d80:	f7fd f9c2 	bl	8000108 <__udivsi3>
 8002d84:	0003      	movs	r3, r0
 8002d86:	001a      	movs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4353      	muls	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	613b      	str	r3, [r7, #16]
      break;
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d96:	613b      	str	r3, [r7, #16]
      break;
 8002d98:	e002      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002d9c:	613b      	str	r3, [r7, #16]
      break;
 8002d9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002da0:	693b      	ldr	r3, [r7, #16]
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b006      	add	sp, #24
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	08003844 	.word	0x08003844
 8002db8:	08003854 	.word	0x08003854
 8002dbc:	02dc6c00 	.word	0x02dc6c00
 8002dc0:	007a1200 	.word	0x007a1200

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ddc:	f7ff fff2 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de0:	0001      	movs	r1, r0
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	2207      	movs	r2, #7
 8002dea:	4013      	ands	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	40d9      	lsrs	r1, r3
 8002df2:	000b      	movs	r3, r1
}    
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	0800383c 	.word	0x0800383c

08002e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e042      	b.n	8002e9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223d      	movs	r2, #61	; 0x3d
 8002e1a:	5c9b      	ldrb	r3, [r3, r2]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d107      	bne.n	8002e32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	223c      	movs	r2, #60	; 0x3c
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7fd ff03 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223d      	movs	r2, #61	; 0x3d
 8002e36:	2102      	movs	r1, #2
 8002e38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	0019      	movs	r1, r3
 8002e44:	0010      	movs	r0, r2
 8002e46:	f000 f871 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2246      	movs	r2, #70	; 0x46
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	223e      	movs	r2, #62	; 0x3e
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2241      	movs	r2, #65	; 0x41
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2242      	movs	r2, #66	; 0x42
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2243      	movs	r2, #67	; 0x43
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2244      	movs	r2, #68	; 0x44
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2245      	movs	r2, #69	; 0x45
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223d      	movs	r2, #61	; 0x3d
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	223d      	movs	r2, #61	; 0x3d
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e02e      	b.n	8002f1a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223d      	movs	r2, #61	; 0x3d
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_TIM_Base_Start+0x80>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x40>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	05db      	lsls	r3, r3, #23
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x40>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_TIM_Base_Start+0x84>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2207      	movs	r2, #7
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d010      	beq.n	8002f18 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	e007      	b.n	8002f18 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b004      	add	sp, #16
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a30      	ldr	r2, [pc, #192]	; (8003000 <TIM_Base_SetConfig+0xd4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d008      	beq.n	8002f56 <TIM_Base_SetConfig+0x2a>
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0x2a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <TIM_Base_SetConfig+0xd8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2270      	movs	r2, #112	; 0x70
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	; (8003000 <TIM_Base_SetConfig+0xd4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d014      	beq.n	8002f9a <TIM_Base_SetConfig+0x6e>
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d00f      	beq.n	8002f9a <TIM_Base_SetConfig+0x6e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a21      	ldr	r2, [pc, #132]	; (8003004 <TIM_Base_SetConfig+0xd8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <TIM_Base_SetConfig+0x6e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a20      	ldr	r2, [pc, #128]	; (8003008 <TIM_Base_SetConfig+0xdc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <TIM_Base_SetConfig+0x6e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <TIM_Base_SetConfig+0xe0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_Base_SetConfig+0x6e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <TIM_Base_SetConfig+0xe4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d108      	bne.n	8002fac <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <TIM_Base_SetConfig+0xe8>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <TIM_Base_SetConfig+0xd4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0xbe>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <TIM_Base_SetConfig+0xe0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0xbe>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <TIM_Base_SetConfig+0xe4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d103      	bne.n	8002ff2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	615a      	str	r2, [r3, #20]
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40002000 	.word	0x40002000
 800300c:	40014400 	.word	0x40014400
 8003010:	40014800 	.word	0x40014800
 8003014:	fffffcff 	.word	0xfffffcff

08003018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e044      	b.n	80030b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2278      	movs	r2, #120	; 0x78
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd fe4b 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2224      	movs	r2, #36	; 0x24
 8003046:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	438a      	bics	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f830 	bl	80030c0 <UART_SetConfig>
 8003060:	0003      	movs	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e024      	b.n	80030b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 f963 	bl	8003340 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	490d      	ldr	r1, [pc, #52]	; (80030bc <HAL_UART_Init+0xa4>)
 8003086:	400a      	ands	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	212a      	movs	r1, #42	; 0x2a
 8003096:	438a      	bics	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f9fb 	bl	80034a8 <UART_CheckIdleState>
 80030b2:	0003      	movs	r3, r0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	ffffb7ff 	.word	0xffffb7ff

080030c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030c8:	231e      	movs	r3, #30
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a8d      	ldr	r2, [pc, #564]	; (8003324 <UART_SetConfig+0x264>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a88      	ldr	r2, [pc, #544]	; (8003328 <UART_SetConfig+0x268>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a7f      	ldr	r2, [pc, #508]	; (800332c <UART_SetConfig+0x26c>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	430a      	orrs	r2, r1
 800313a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a7b      	ldr	r2, [pc, #492]	; (8003330 <UART_SetConfig+0x270>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d127      	bne.n	8003196 <UART_SetConfig+0xd6>
 8003146:	4b7b      	ldr	r3, [pc, #492]	; (8003334 <UART_SetConfig+0x274>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	2203      	movs	r2, #3
 800314c:	4013      	ands	r3, r2
 800314e:	2b03      	cmp	r3, #3
 8003150:	d00d      	beq.n	800316e <UART_SetConfig+0xae>
 8003152:	d81b      	bhi.n	800318c <UART_SetConfig+0xcc>
 8003154:	2b02      	cmp	r3, #2
 8003156:	d014      	beq.n	8003182 <UART_SetConfig+0xc2>
 8003158:	d818      	bhi.n	800318c <UART_SetConfig+0xcc>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <UART_SetConfig+0xa4>
 800315e:	2b01      	cmp	r3, #1
 8003160:	d00a      	beq.n	8003178 <UART_SetConfig+0xb8>
 8003162:	e013      	b.n	800318c <UART_SetConfig+0xcc>
 8003164:	231f      	movs	r3, #31
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e021      	b.n	80031b2 <UART_SetConfig+0xf2>
 800316e:	231f      	movs	r3, #31
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e01c      	b.n	80031b2 <UART_SetConfig+0xf2>
 8003178:	231f      	movs	r3, #31
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2204      	movs	r2, #4
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e017      	b.n	80031b2 <UART_SetConfig+0xf2>
 8003182:	231f      	movs	r3, #31
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2208      	movs	r2, #8
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e012      	b.n	80031b2 <UART_SetConfig+0xf2>
 800318c:	231f      	movs	r3, #31
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2210      	movs	r2, #16
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e00d      	b.n	80031b2 <UART_SetConfig+0xf2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a67      	ldr	r2, [pc, #412]	; (8003338 <UART_SetConfig+0x278>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d104      	bne.n	80031aa <UART_SetConfig+0xea>
 80031a0:	231f      	movs	r3, #31
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e003      	b.n	80031b2 <UART_SetConfig+0xf2>
 80031aa:	231f      	movs	r3, #31
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2210      	movs	r2, #16
 80031b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d15c      	bne.n	8003278 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80031be:	231f      	movs	r3, #31
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d015      	beq.n	80031f4 <UART_SetConfig+0x134>
 80031c8:	dc18      	bgt.n	80031fc <UART_SetConfig+0x13c>
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d00d      	beq.n	80031ea <UART_SetConfig+0x12a>
 80031ce:	dc15      	bgt.n	80031fc <UART_SetConfig+0x13c>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <UART_SetConfig+0x11a>
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d005      	beq.n	80031e4 <UART_SetConfig+0x124>
 80031d8:	e010      	b.n	80031fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031da:	f7ff fdfd 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80031de:	0003      	movs	r3, r0
 80031e0:	61bb      	str	r3, [r7, #24]
        break;
 80031e2:	e012      	b.n	800320a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b55      	ldr	r3, [pc, #340]	; (800333c <UART_SetConfig+0x27c>)
 80031e6:	61bb      	str	r3, [r7, #24]
        break;
 80031e8:	e00f      	b.n	800320a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7ff fd77 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 80031ee:	0003      	movs	r3, r0
 80031f0:	61bb      	str	r3, [r7, #24]
        break;
 80031f2:	e00a      	b.n	800320a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	61bb      	str	r3, [r7, #24]
        break;
 80031fa:	e006      	b.n	800320a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003200:	231e      	movs	r3, #30
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
        break;
 8003208:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d100      	bne.n	8003212 <UART_SetConfig+0x152>
 8003210:	e07a      	b.n	8003308 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	005a      	lsls	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	18d2      	adds	r2, r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	0019      	movs	r1, r3
 8003224:	0010      	movs	r0, r2
 8003226:	f7fc ff6f 	bl	8000108 <__udivsi3>
 800322a:	0003      	movs	r3, r0
 800322c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b0f      	cmp	r3, #15
 8003232:	d91c      	bls.n	800326e <UART_SetConfig+0x1ae>
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	429a      	cmp	r2, r3
 800323c:	d217      	bcs.n	800326e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	b29a      	uxth	r2, r3
 8003242:	200e      	movs	r0, #14
 8003244:	183b      	adds	r3, r7, r0
 8003246:	210f      	movs	r1, #15
 8003248:	438a      	bics	r2, r1
 800324a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	2207      	movs	r2, #7
 8003254:	4013      	ands	r3, r2
 8003256:	b299      	uxth	r1, r3
 8003258:	183b      	adds	r3, r7, r0
 800325a:	183a      	adds	r2, r7, r0
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	183a      	adds	r2, r7, r0
 8003268:	8812      	ldrh	r2, [r2, #0]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	e04c      	b.n	8003308 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800326e:	231e      	movs	r3, #30
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e047      	b.n	8003308 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003278:	231f      	movs	r3, #31
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d015      	beq.n	80032ae <UART_SetConfig+0x1ee>
 8003282:	dc18      	bgt.n	80032b6 <UART_SetConfig+0x1f6>
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00d      	beq.n	80032a4 <UART_SetConfig+0x1e4>
 8003288:	dc15      	bgt.n	80032b6 <UART_SetConfig+0x1f6>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <UART_SetConfig+0x1d4>
 800328e:	2b02      	cmp	r3, #2
 8003290:	d005      	beq.n	800329e <UART_SetConfig+0x1de>
 8003292:	e010      	b.n	80032b6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003294:	f7ff fda0 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8003298:	0003      	movs	r3, r0
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e012      	b.n	80032c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <UART_SetConfig+0x27c>)
 80032a0:	61bb      	str	r3, [r7, #24]
        break;
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a4:	f7ff fd1a 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 80032a8:	0003      	movs	r3, r0
 80032aa:	61bb      	str	r3, [r7, #24]
        break;
 80032ac:	e00a      	b.n	80032c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	61bb      	str	r3, [r7, #24]
        break;
 80032b4:	e006      	b.n	80032c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ba:	231e      	movs	r3, #30
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
        break;
 80032c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01e      	beq.n	8003308 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	085a      	lsrs	r2, r3, #1
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	18d2      	adds	r2, r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0019      	movs	r1, r3
 80032da:	0010      	movs	r0, r2
 80032dc:	f7fc ff14 	bl	8000108 <__udivsi3>
 80032e0:	0003      	movs	r3, r0
 80032e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b0f      	cmp	r3, #15
 80032e8:	d90a      	bls.n	8003300 <UART_SetConfig+0x240>
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	025b      	lsls	r3, r3, #9
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d205      	bcs.n	8003300 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e003      	b.n	8003308 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003300:	231e      	movs	r3, #30
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003314:	231e      	movs	r3, #30
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b008      	add	sp, #32
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	efff69f3 	.word	0xefff69f3
 8003328:	ffffcfff 	.word	0xffffcfff
 800332c:	fffff4ff 	.word	0xfffff4ff
 8003330:	40013800 	.word	0x40013800
 8003334:	40021000 	.word	0x40021000
 8003338:	40004400 	.word	0x40004400
 800333c:	007a1200 	.word	0x007a1200

08003340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d00b      	beq.n	800336a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <UART_AdvFeatureConfig+0x144>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d00b      	beq.n	800338c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a43      	ldr	r2, [pc, #268]	; (8003488 <UART_AdvFeatureConfig+0x148>)
 800337c:	4013      	ands	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2204      	movs	r2, #4
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a3b      	ldr	r2, [pc, #236]	; (800348c <UART_AdvFeatureConfig+0x14c>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2208      	movs	r2, #8
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a34      	ldr	r2, [pc, #208]	; (8003490 <UART_AdvFeatureConfig+0x150>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2210      	movs	r2, #16
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <UART_AdvFeatureConfig+0x154>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2220      	movs	r2, #32
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4a25      	ldr	r2, [pc, #148]	; (8003498 <UART_AdvFeatureConfig+0x158>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	4013      	ands	r3, r2
 800341c:	d01d      	beq.n	800345a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <UART_AdvFeatureConfig+0x15c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	035b      	lsls	r3, r3, #13
 800343e:	429a      	cmp	r2, r3
 8003440:	d10b      	bne.n	800345a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <UART_AdvFeatureConfig+0x160>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <UART_AdvFeatureConfig+0x164>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	fffdffff 	.word	0xfffdffff
 8003488:	fffeffff 	.word	0xfffeffff
 800348c:	fffbffff 	.word	0xfffbffff
 8003490:	ffff7fff 	.word	0xffff7fff
 8003494:	ffffefff 	.word	0xffffefff
 8003498:	ffffdfff 	.word	0xffffdfff
 800349c:	ffefffff 	.word	0xffefffff
 80034a0:	ff9fffff 	.word	0xff9fffff
 80034a4:	fff7ffff 	.word	0xfff7ffff

080034a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b092      	sub	sp, #72	; 0x48
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2284      	movs	r2, #132	; 0x84
 80034b4:	2100      	movs	r1, #0
 80034b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b8:	f7fd fe52 	bl	8001160 <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d12c      	bne.n	8003528 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0391      	lsls	r1, r2, #14
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4a46      	ldr	r2, [pc, #280]	; (80035f0 <UART_CheckIdleState+0x148>)
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	f000 f88c 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d021      	beq.n	8003528 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ee:	2301      	movs	r3, #1
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	438a      	bics	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2278      	movs	r2, #120	; 0x78
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e05f      	b.n	80035e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	2b04      	cmp	r3, #4
 8003534:	d146      	bne.n	80035c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	03d1      	lsls	r1, r2, #15
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <UART_CheckIdleState+0x148>)
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	f000 f858 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d03b      	beq.n	80035c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354c:	f3ef 8310 	mrs	r3, PRIMASK
 8003550:	60fb      	str	r3, [r7, #12]
  return(result);
 8003552:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
 8003556:	2301      	movs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4921      	ldr	r1, [pc, #132]	; (80035f4 <UART_CheckIdleState+0x14c>)
 800356e:	400a      	ands	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f383 8810 	msr	PRIMASK, r3
}
 800357c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	61bb      	str	r3, [r7, #24]
  return(result);
 8003584:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	633b      	str	r3, [r7, #48]	; 0x30
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	438a      	bics	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	2120      	movs	r1, #32
 80035b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2278      	movs	r2, #120	; 0x78
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e011      	b.n	80035e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	2120      	movs	r1, #32
 80035d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2278      	movs	r2, #120	; 0x78
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b010      	add	sp, #64	; 0x40
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	01ffffff 	.word	0x01ffffff
 80035f4:	fffffedf 	.word	0xfffffedf

080035f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003608:	e04b      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3301      	adds	r3, #1
 800360e:	d048      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fd fda6 	bl	8001160 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e04b      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d035      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2208      	movs	r2, #8
 800363e:	4013      	ands	r3, r2
 8003640:	2b08      	cmp	r3, #8
 8003642:	d111      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f83c 	bl	80036cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2284      	movs	r2, #132	; 0x84
 8003658:	2108      	movs	r1, #8
 800365a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2278      	movs	r2, #120	; 0x78
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e02c      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	401a      	ands	r2, r3
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	429a      	cmp	r2, r3
 800367a:	d112      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f81f 	bl	80036cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2284      	movs	r2, #132	; 0x84
 8003692:	2120      	movs	r1, #32
 8003694:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2278      	movs	r2, #120	; 0x78
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	425a      	negs	r2, r3
 80036b2:	4153      	adcs	r3, r2
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	001a      	movs	r2, r3
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0a4      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	; 0x38
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d4:	f3ef 8310 	mrs	r3, PRIMASK
 80036d8:	617b      	str	r3, [r7, #20]
  return(result);
 80036da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	2301      	movs	r3, #1
 80036e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4926      	ldr	r1, [pc, #152]	; (8003790 <UART_EndRxTransfer+0xc4>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003706:	f3ef 8310 	mrs	r3, PRIMASK
 800370a:	623b      	str	r3, [r7, #32]
  return(result);
 800370c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
 8003710:	2301      	movs	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2101      	movs	r1, #1
 8003728:	438a      	bics	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	2b01      	cmp	r3, #1
 800373e:	d118      	bne.n	8003772 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003740:	f3ef 8310 	mrs	r3, PRIMASK
 8003744:	60bb      	str	r3, [r7, #8]
  return(result);
 8003746:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374a:	2301      	movs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2110      	movs	r1, #16
 8003762:	438a      	bics	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	2120      	movs	r1, #32
 8003778:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b00e      	add	sp, #56	; 0x38
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffedf 	.word	0xfffffedf

08003794 <__libc_init_array>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	2600      	movs	r6, #0
 8003798:	4d0c      	ldr	r5, [pc, #48]	; (80037cc <__libc_init_array+0x38>)
 800379a:	4c0d      	ldr	r4, [pc, #52]	; (80037d0 <__libc_init_array+0x3c>)
 800379c:	1b64      	subs	r4, r4, r5
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	42a6      	cmp	r6, r4
 80037a2:	d109      	bne.n	80037b8 <__libc_init_array+0x24>
 80037a4:	2600      	movs	r6, #0
 80037a6:	f000 f82b 	bl	8003800 <_init>
 80037aa:	4d0a      	ldr	r5, [pc, #40]	; (80037d4 <__libc_init_array+0x40>)
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <__libc_init_array+0x44>)
 80037ae:	1b64      	subs	r4, r4, r5
 80037b0:	10a4      	asrs	r4, r4, #2
 80037b2:	42a6      	cmp	r6, r4
 80037b4:	d105      	bne.n	80037c2 <__libc_init_array+0x2e>
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	00b3      	lsls	r3, r6, #2
 80037ba:	58eb      	ldr	r3, [r5, r3]
 80037bc:	4798      	blx	r3
 80037be:	3601      	adds	r6, #1
 80037c0:	e7ee      	b.n	80037a0 <__libc_init_array+0xc>
 80037c2:	00b3      	lsls	r3, r6, #2
 80037c4:	58eb      	ldr	r3, [r5, r3]
 80037c6:	4798      	blx	r3
 80037c8:	3601      	adds	r6, #1
 80037ca:	e7f2      	b.n	80037b2 <__libc_init_array+0x1e>
 80037cc:	08003864 	.word	0x08003864
 80037d0:	08003864 	.word	0x08003864
 80037d4:	08003864 	.word	0x08003864
 80037d8:	08003868 	.word	0x08003868

080037dc <memcpy>:
 80037dc:	2300      	movs	r3, #0
 80037de:	b510      	push	{r4, lr}
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d100      	bne.n	80037e6 <memcpy+0xa>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	5ccc      	ldrb	r4, [r1, r3]
 80037e8:	54c4      	strb	r4, [r0, r3]
 80037ea:	3301      	adds	r3, #1
 80037ec:	e7f8      	b.n	80037e0 <memcpy+0x4>

080037ee <memset>:
 80037ee:	0003      	movs	r3, r0
 80037f0:	1882      	adds	r2, r0, r2
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d100      	bne.n	80037f8 <memset+0xa>
 80037f6:	4770      	bx	lr
 80037f8:	7019      	strb	r1, [r3, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	e7f9      	b.n	80037f2 <memset+0x4>
	...

08003800 <_init>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr

0800380c <_fini>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr
