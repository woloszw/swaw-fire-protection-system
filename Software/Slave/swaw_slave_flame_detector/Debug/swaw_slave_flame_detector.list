
swaw_slave_flame_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  0800390c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  0800390c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f187  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002704  00000000  00000000  0002f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  000325f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a666  00000000  00000000  00033208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ae2  00000000  00000000  0004d86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b52  00000000  00000000  0005f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4ea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  000f4ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003894 	.word	0x08003894

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003894 	.word	0x08003894

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f003 fb27 	bl	8003882 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000236:	4a2d      	ldr	r2, [pc, #180]	; (80002ec <MX_ADC_Init+0xcc>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <MX_ADC_Init+0xc8>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <MX_ADC_Init+0xc8>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000254:	2204      	movs	r2, #4
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <MX_ADC_Init+0xc8>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000264:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000266:	2200      	movs	r2, #0
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <MX_ADC_Init+0xc8>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <MX_ADC_Init+0xc8>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2100      	movs	r1, #0
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000288:	2200      	movs	r2, #0
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_ADC_Init+0xc8>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 ff98 	bl	80011c4 <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 fc04 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2204      	movs	r2, #4
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2201      	movs	r2, #1
 80002ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f9fc 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80002c0:	f000 fbf0 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2205      	movs	r2, #5
 80002c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ca:	1d3a      	adds	r2, r7, #4
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 f9ef 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80002da:	f000 fbe3 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
//
  /* USER CODE END ADC_Init 2 */

}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40012400 	.word	0x40012400

080002f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08b      	sub	sp, #44	; 0x2c
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	2414      	movs	r4, #20
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 fabd 	bl	8003882 <memset>
  if(adcHandle->Instance==ADC1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a19      	ldr	r2, [pc, #100]	; (8000374 <HAL_ADC_MspInit+0x84>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d12b      	bne.n	800036a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000314:	699a      	ldr	r2, [r3, #24]
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0089      	lsls	r1, r1, #2
 800031c:	430a      	orrs	r2, r1
 800031e:	619a      	str	r2, [r3, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000322:	699a      	ldr	r2, [r3, #24]
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000330:	695a      	ldr	r2, [r3, #20]
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	0289      	lsls	r1, r1, #10
 8000338:	430a      	orrs	r2, r1
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <HAL_ADC_MspInit+0x88>)
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	029b      	lsls	r3, r3, #10
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = FLAME_SENS_ADC_PIN_Pin|GAS_SENS_ADC_PIN_Pin;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2230      	movs	r2, #48	; 0x30
 800034e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000350:	193b      	adds	r3, r7, r4
 8000352:	2203      	movs	r2, #3
 8000354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	193a      	adds	r2, r7, r4
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	0011      	movs	r1, r2
 8000364:	0018      	movs	r0, r3
 8000366:	f001 ff01 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b00b      	add	sp, #44	; 0x2c
 8000370:	bd90      	pop	{r4, r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	40012400 	.word	0x40012400
 8000378:	40021000 	.word	0x40021000

0800037c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_CAN_Init+0x68>)
 8000382:	4a19      	ldr	r2, [pc, #100]	; (80003e8 <MX_CAN_Init+0x6c>)
 8000384:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 100;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_CAN_Init+0x68>)
 8000388:	2264      	movs	r2, #100	; 0x64
 800038a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_CAN_Init+0x68>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_CAN_Init+0x68>)
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0452      	lsls	r2, r2, #17
 8000398:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_CAN_Init+0x68>)
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0252      	lsls	r2, r2, #9
 80003a0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_CAN_Init+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_CAN_Init+0x68>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_CAN_Init+0x68>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_CAN_Init+0x68>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_CAN_Init+0x68>)
 80003bc:	2201      	movs	r2, #1
 80003be:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_CAN_Init+0x68>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_CAN_Init+0x68>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <MX_CAN_Init+0x68>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fbc9 	bl	8001b66 <HAL_CAN_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003d8:	f000 fb64 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	20000068 	.word	0x20000068
 80003e8:	40006400 	.word	0x40006400

080003ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08b      	sub	sp, #44	; 0x2c
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	2414      	movs	r4, #20
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	0018      	movs	r0, r3
 80003fa:	2314      	movs	r3, #20
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f003 fa3f 	bl	8003882 <memset>
  if(canHandle->Instance==CAN)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a2f      	ldr	r2, [pc, #188]	; (80004c8 <HAL_CAN_MspInit+0xdc>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d157      	bne.n	80004be <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800040e:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000410:	69da      	ldr	r2, [r3, #28]
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0489      	lsls	r1, r1, #18
 8000418:	430a      	orrs	r2, r1
 800041a:	61da      	str	r2, [r3, #28]
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800041e:	69da      	ldr	r2, [r3, #28]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	049b      	lsls	r3, r3, #18
 8000424:	4013      	ands	r3, r2
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	02c9      	lsls	r1, r1, #11
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	02db      	lsls	r3, r3, #11
 8000440:	4013      	ands	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b20      	ldr	r3, [pc, #128]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0289      	lsls	r1, r1, #10
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <HAL_CAN_MspInit+0xe0>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	029b      	lsls	r3, r3, #10
 800045c:	4013      	ands	r3, r2
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_PIN_Pin;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2202      	movs	r2, #2
 800046e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2203      	movs	r2, #3
 800047a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2204      	movs	r2, #4
 8000480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CAN_RX_PIN_GPIO_Port, &GPIO_InitStruct);
 8000482:	193b      	adds	r3, r7, r4
 8000484:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <HAL_CAN_MspInit+0xe4>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f001 fe6f 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_PIN_Pin;
 800048e:	0021      	movs	r1, r4
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	0152      	lsls	r2, r2, #5
 8000496:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2203      	movs	r2, #3
 80004a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2204      	movs	r2, #4
 80004ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CAN_TX_PIN_GPIO_Port, &GPIO_InitStruct);
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fe57 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b00b      	add	sp, #44	; 0x2c
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40006400 	.word	0x40006400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400

080004d4 <ds18b20_init>:

#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE

HAL_StatusTypeDef ds18b20_init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  return wire_init();
 80004d8:	f000 fc4e 	bl	8000d78 <wire_init>
 80004dc:	0003      	movs	r3, r0
}
 80004de:	0018      	movs	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <ds18b20_read_address>:

HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 80004ec:	f000 fc66 	bl	8000dbc <wire_reset>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <ds18b20_read_address+0x14>
    return HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	e025      	b.n	8000544 <ds18b20_read_address+0x60>

  wire_write(DS18B20_READ_ROM);
 80004f8:	2033      	movs	r0, #51	; 0x33
 80004fa:	f000 fd1b 	bl	8000f34 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e009      	b.n	8000518 <ds18b20_read_address+0x34>
    rom_code[i] = wire_read();
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	18d4      	adds	r4, r2, r3
 800050a:	f000 fcb6 	bl	8000e7a <wire_read>
 800050e:	0003      	movs	r3, r0
 8000510:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b07      	cmp	r3, #7
 800051c:	ddf2      	ble.n	8000504 <ds18b20_read_address+0x20>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 800051e:	250b      	movs	r5, #11
 8000520:	197c      	adds	r4, r7, r5
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2107      	movs	r1, #7
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fd5a 	bl	8000fe0 <wire_crc>
 800052c:	0003      	movs	r3, r0
 800052e:	7023      	strb	r3, [r4, #0]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3307      	adds	r3, #7
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	197a      	adds	r2, r7, r5
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d101      	bne.n	8000542 <ds18b20_read_address+0x5e>
    return HAL_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <ds18b20_read_address+0x60>
  else
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	b004      	add	sp, #16
 800054a:	bdb0      	pop	{r4, r5, r7, pc}

0800054c <send_cmd>:
static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	000a      	movs	r2, r1
 8000556:	1cfb      	adds	r3, r7, #3
 8000558:	701a      	strb	r2, [r3, #0]
  int i;

  if (wire_reset() != HAL_OK)
 800055a:	f000 fc2f 	bl	8000dbc <wire_reset>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <send_cmd+0x1a>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e01f      	b.n	80005a6 <send_cmd+0x5a>

  if (!rom_code) {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800056c:	20cc      	movs	r0, #204	; 0xcc
 800056e:	f000 fce1 	bl	8000f34 <wire_write>
 8000572:	e012      	b.n	800059a <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000574:	2055      	movs	r0, #85	; 0x55
 8000576:	f000 fcdd 	bl	8000f34 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e009      	b.n	8000594 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	18d3      	adds	r3, r2, r3
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fcd3 	bl	8000f34 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2b07      	cmp	r3, #7
 8000598:	ddf2      	ble.n	8000580 <send_cmd+0x34>
  }
  wire_write(cmd);
 800059a:	1cfb      	adds	r3, r7, #3
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fcc8 	bl	8000f34 <wire_write>
  return HAL_OK;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	0018      	movs	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b004      	add	sp, #16
 80005ac:	bd80      	pop	{r7, pc}

080005ae <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2144      	movs	r1, #68	; 0x44
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff ffc6 	bl	800054c <send_cmd>
 80005c0:	0003      	movs	r3, r0
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ds18b20_read_scratchpad>:


static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 80005ca:	b5b0      	push	{r4, r5, r7, lr}
 80005cc:	b084      	sub	sp, #16
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	21be      	movs	r1, #190	; 0xbe
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff ffb7 	bl	800054c <send_cmd>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e022      	b.n	800062c <ds18b20_read_scratchpad+0x62>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e009      	b.n	8000600 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	18d4      	adds	r4, r2, r3
 80005f2:	f000 fc42 	bl	8000e7a <wire_read>
 80005f6:	0003      	movs	r3, r0
 80005f8:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b08      	cmp	r3, #8
 8000604:	ddf2      	ble.n	80005ec <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000606:	250b      	movs	r5, #11
 8000608:	197c      	adds	r4, r7, r5
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2108      	movs	r1, #8
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fce6 	bl	8000fe0 <wire_crc>
 8000614:	0003      	movs	r3, r0
 8000616:	7023      	strb	r3, [r4, #0]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	3308      	adds	r3, #8
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	197a      	adds	r2, r7, r5
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d101      	bne.n	800062a <ds18b20_read_scratchpad+0x60>
    return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <ds18b20_read_scratchpad+0x62>
  else
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bdb0      	pop	{r4, r5, r7, pc}

08000634 <ds18b20_get_temp>:

int16_t ds18b20_get_temp(const uint8_t* rom_code)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 800063c:	230c      	movs	r3, #12
 800063e:	18fa      	adds	r2, r7, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ffc0 	bl	80005ca <ds18b20_read_scratchpad>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d002      	beq.n	8000654 <ds18b20_get_temp+0x20>
    return 1360;
 800064e:	23aa      	movs	r3, #170	; 0xaa
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	e00a      	b.n	800066a <ds18b20_get_temp+0x36>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000654:	230c      	movs	r3, #12
 8000656:	18f9      	adds	r1, r7, r3
 8000658:	240a      	movs	r4, #10
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2202      	movs	r2, #2
 800065e:	0018      	movs	r0, r3
 8000660:	f003 f906 	bl	8003870 <memcpy>

  return temp;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	5e9b      	ldrsh	r3, [r3, r2]
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b007      	add	sp, #28
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <flame_sensor_read>:
#include "adc.h"

HAL_StatusTypeDef flame_sensor_read(uint16_t* flame_ptr){
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig_4 = {0};
 800067c:	2408      	movs	r4, #8
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	230c      	movs	r3, #12
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f003 f8fb 	bl	8003882 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig_4.Channel = ADC_CHANNEL_4;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2204      	movs	r2, #4
 8000690:	601a      	str	r2, [r3, #0]
	  sConfig_4.Rank = 1;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
	  sConfig_4.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2203      	movs	r2, #3
 800069c:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig_4) != HAL_OK)
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <flame_sensor_read+0xb4>)
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 f805 	bl	80016b4 <HAL_ADC_ConfigChannel>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <flame_sensor_read+0x3e>
	  {
		Error_Handler();
 80006ae:	f000 f9f9 	bl	8000aa4 <Error_Handler>
	  }
	  HAL_ADC_Start(&hadc);
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <flame_sensor_read+0xb4>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fec5 	bl	8001444 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80006ba:	2301      	movs	r3, #1
 80006bc:	425a      	negs	r2, r3
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <flame_sensor_read+0xb4>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 ff52 	bl	800156c <HAL_ADC_PollForConversion>
	  while(HAL_ADC_GetState(&hadc)== HAL_ADC_STATE_BUSY){}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <flame_sensor_read+0xb4>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f8ff 	bl	80018d0 <HAL_ADC_GetState>
 80006d2:	0003      	movs	r3, r0
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d0f8      	beq.n	80006ca <flame_sensor_read+0x56>
	  uint16_t adcValue = (uint16_t)HAL_ADC_GetValue(&hadc);
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <flame_sensor_read+0xb4>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 ffde 	bl	800169c <HAL_ADC_GetValue>
 80006e0:	0002      	movs	r2, r0
 80006e2:	2316      	movs	r3, #22
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <flame_sensor_read+0xb4>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fefe 	bl	80014ec <HAL_ADC_Stop>

	  sConfig_4.Rank = ADC_RANK_NONE;
 80006f0:	2108      	movs	r1, #8
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <flame_sensor_read+0xb8>)
 80006f6:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig_4) != HAL_OK)
 80006f8:	187a      	adds	r2, r7, r1
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <flame_sensor_read+0xb4>)
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 ffd8 	bl	80016b4 <HAL_ADC_ConfigChannel>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <flame_sensor_read+0x98>
	  {
		Error_Handler();
 8000708:	f000 f9cc 	bl	8000aa4 <Error_Handler>
	  }


	  HAL_Delay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f000 fd35 	bl	800117c <HAL_Delay>
	  *flame_ptr = adcValue;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2216      	movs	r2, #22
 8000716:	18ba      	adds	r2, r7, r2
 8000718:	8812      	ldrh	r2, [r2, #0]
 800071a:	801a      	strh	r2, [r3, #0]

	  return HAL_OK;
 800071c:	2300      	movs	r3, #0

}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b007      	add	sp, #28
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000028 	.word	0x20000028
 800072c:	00001001 	.word	0x00001001

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	240c      	movs	r4, #12
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 f89e 	bl	8003882 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <MX_GPIO_Init+0x110>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x110>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	02c9      	lsls	r1, r1, #11
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_GPIO_Init+0x110>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	02db      	lsls	r3, r3, #11
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_GPIO_Init+0x110>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <MX_GPIO_Init+0x110>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	03c9      	lsls	r1, r1, #15
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b33      	ldr	r3, [pc, #204]	; (8000840 <MX_GPIO_Init+0x110>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	03db      	lsls	r3, r3, #15
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <MX_GPIO_Init+0x110>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_GPIO_Init+0x110>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_GPIO_Init+0x110>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|ID_0_PIN_Pin|ID_1_PIN_Pin, GPIO_PIN_RESET);
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2200      	movs	r2, #0
 80007a0:	21c3      	movs	r1, #195	; 0xc3
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fe67 	bl	8002476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ID_2_PIN_GPIO_Port, ID_2_PIN_Pin, GPIO_PIN_RESET);
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x114>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	2102      	movs	r1, #2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fe61 	bl	8002476 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	0119      	lsls	r1, r3, #4
 80007b8:	2390      	movs	r3, #144	; 0x90
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	2201      	movs	r2, #1
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fe59 	bl	8002476 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|ID_0_PIN_Pin|ID_1_PIN_Pin;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	22c3      	movs	r2, #195	; 0xc3
 80007c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	193a      	adds	r2, r7, r4
 80007de:	2390      	movs	r3, #144	; 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fcc1 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID_2_PIN_Pin;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2202      	movs	r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2201      	movs	r2, #1
 80007f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ID_2_PIN_GPIO_Port, &GPIO_InitStruct);
 8000802:	193b      	adds	r3, r7, r4
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MX_GPIO_Init+0x114>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f001 fcaf 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ONE_WIRE_Pin;
 800080e:	0021      	movs	r1, r4
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2211      	movs	r2, #17
 800081c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 800082a:	187a      	adds	r2, r7, r1
 800082c:	2390      	movs	r3, #144	; 0x90
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fc9a 	bl	800216c <HAL_GPIO_Init>

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b009      	add	sp, #36	; 0x24
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	48000400 	.word	0x48000400

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b09d      	sub	sp, #116	; 0x74
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t slave_id = 0;
 800084e:	236f      	movs	r3, #111	; 0x6f
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fc2d 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f8d5 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff ff67 	bl	8000730 <MX_GPIO_Init>
  MX_ADC_Init();
 8000862:	f7ff fcdd 	bl	8000220 <MX_ADC_Init>
  MX_CAN_Init();
 8000866:	f7ff fd89 	bl	800037c <MX_CAN_Init>
  MX_USART2_UART_Init();
 800086a:	f000 fa09 	bl	8000c80 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800086e:	f000 f9bf 	bl	8000bf0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 8000872:	2350      	movs	r3, #80	; 0x50
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	4a5e      	ldr	r2, [pc, #376]	; (80009f0 <main+0x1a8>)
 8000878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800087a:	c313      	stmia	r3!, {r0, r1, r4}
 800087c:	6811      	ldr	r1, [r2, #0]
 800087e:	6019      	str	r1, [r3, #0]
 8000880:	8892      	ldrh	r2, [r2, #4]
 8000882:	809a      	strh	r2, [r3, #4]
  uint8_t txbuf[32];

  if (ds18b20_init() != HAL_OK) {
 8000884:	f7ff fe26 	bl	80004d4 <ds18b20_init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <main+0x48>
    Error_Handler();
 800088c:	f000 f90a 	bl	8000aa4 <Error_Handler>
  }
  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

  if (ds18b20_read_address(ds1) != HAL_OK) {
 8000890:	2328      	movs	r3, #40	; 0x28
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fe25 	bl	80004e4 <ds18b20_read_address>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <main+0x5a>
    Error_Handler();
 800089e:	f000 f901 	bl	8000aa4 <Error_Handler>
  }

  HAL_CAN_Start(&hcan);
 80008a2:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <main+0x1ac>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fa5c 	bl	8001d62 <HAL_CAN_Start>
  //dip switch slave id read
  int tmp_id;
  tmp_id =HAL_GPIO_ReadPin(ID_0_PIN_GPIO_Port, ID_0_PIN_Pin);
 80008aa:	2390      	movs	r3, #144	; 0x90
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fdc3 	bl	800243c <HAL_GPIO_ReadPin>
 80008b6:	0003      	movs	r3, r0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  slave_id |= tmp_id;
 80008ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	246f      	movs	r4, #111	; 0x6f
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	701a      	strb	r2, [r3, #0]
  tmp_id =HAL_GPIO_ReadPin(ID_1_PIN_GPIO_Port, ID_1_PIN_Pin);
 80008ce:	2390      	movs	r3, #144	; 0x90
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fdb1 	bl	800243c <HAL_GPIO_ReadPin>
 80008da:	0003      	movs	r3, r0
 80008dc:	66bb      	str	r3, [r7, #104]	; 0x68
  slave_id |= (tmp_id<<1);
 80008de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	b25a      	sxtb	r2, r3
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b25a      	sxtb	r2, r3
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	701a      	strb	r2, [r3, #0]
  tmp_id =HAL_GPIO_ReadPin(ID_2_PIN_GPIO_Port, ID_2_PIN_Pin);
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <main+0x1b0>)
 80008f4:	2102      	movs	r1, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fda0 	bl	800243c <HAL_GPIO_ReadPin>
 80008fc:	0003      	movs	r3, r0
 80008fe:	66bb      	str	r3, [r7, #104]	; 0x68
  slave_id |= (tmp_id<<2);
 8000900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	b25a      	sxtb	r2, r3
 8000906:	193b      	adds	r3, r7, r4
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b25b      	sxtb	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b25a      	sxtb	r2, r3
 8000910:	193b      	adds	r3, r7, r4
 8000912:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8000914:	23fa      	movs	r3, #250	; 0xfa
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fc2f 	bl	800117c <HAL_Delay>


  // struct for can
  CAN_TxHeaderTypeDef txHeader;
  uint32_t              TxMailbox;
  uint32_t can_node_id_base = slave_id << 8;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	667b      	str	r3, [r7, #100]	; 0x64
  //connect to master frame

  uint8_t connect_byte = 0xff;
 8000926:	200b      	movs	r0, #11
 8000928:	183b      	adds	r3, r7, r0
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	701a      	strb	r2, [r3, #0]
  txHeader.StdId = can_node_id_base;
 800092e:	2110      	movs	r1, #16
 8000930:	187b      	adds	r3, r7, r1
 8000932:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000934:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0;      // ID rozszerzone (0 dla ramki standardowej)
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  txHeader.RTR = CAN_RTR_DATA;  // Tryb transmisji - dane
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  txHeader.IDE = CAN_ID_STD;    // Format identyfikatora - standardowy
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  txHeader.DLC = 1;  // Długość danych (w bajtach)
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2201      	movs	r2, #1
 800094c:	611a      	str	r2, [r3, #16]

  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, &connect_byte, &TxMailbox) == HAL_OK) {
 800094e:	230c      	movs	r3, #12
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	183a      	adds	r2, r7, r0
 8000954:	000c      	movs	r4, r1
 8000956:	1879      	adds	r1, r7, r1
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <main+0x1ac>)
 800095a:	f001 fa48 	bl	8001dee <HAL_CAN_AddTxMessage>
 	  } else {
 	    // Błąd podczas dodawania wiadomości do kolejki transmisji
 	  }

 	  // Czekanie na zakończenie transmisji
 	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 3) {
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <main+0x1ac>)
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fb16 	bl	8001f92 <HAL_CAN_GetTxMailboxesFreeLevel>



  uint8_t tx_can_data[6];

  txHeader.StdId = can_node_id_base | 0x1;  // Node ID
 8000966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000968:	2201      	movs	r2, #1
 800096a:	431a      	orrs	r2, r3
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	601a      	str	r2, [r3, #0]

  txHeader.ExtId = 0;      // ID rozszerzone (0 dla ramki standardowej)
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  txHeader.RTR = CAN_RTR_DATA;  // Tryb transmisji - dane
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  txHeader.IDE = CAN_ID_STD;    // Format identyfikatora - standardowy
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  txHeader.DLC = 6;  // Długość danych (w bajtach)
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2206      	movs	r2, #6
 8000988:	611a      	str	r2, [r3, #16]
//	  sprintf((char*)txbuf, "ID: %d\r\n", slave_id);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
	  while (1)
	  {

	    ds18b20_start_measure(NULL);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe0f 	bl	80005ae <ds18b20_start_measure>
	    HAL_Delay(750);
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <main+0x1b4>)
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fbf2 	bl	800117c <HAL_Delay>
	    payload_slv.temp_val = ds18b20_get_temp(NULL);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fe4b 	bl	8000634 <ds18b20_get_temp>
 800099e:	0003      	movs	r3, r0
 80009a0:	001a      	movs	r2, r3
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <main+0x1b8>)
 80009a4:	809a      	strh	r2, [r3, #4]
//	  sprintf((char*)txbuf, "Temp vlaue: %d\r\n", payload_slv.temp_val);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
//
//
//
	  flame_sensor_read(&payload_slv.flame_val);
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <main+0x1bc>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fe63 	bl	8000674 <flame_sensor_read>
//	  sprintf((char*)txbuf, "Flame vlaue: %d\r\n", payload_slv.flame_val);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
	  HAL_Delay(1000);
 80009ae:	23fa      	movs	r3, #250	; 0xfa
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fbe2 	bl	800117c <HAL_Delay>
	  smoke_sensor_read(&payload_slv.smoke_val);
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <main+0x1b8>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f878 	bl	8000ab0 <smoke_sensor_read>
//	  sprintf((char*)txbuf, "Smoke vlaue: %d\r\n", payload_slv.smoke_val);
//	  HAL_UART_Transmit(&huart2,txbuf,strlen(txbuf),10);// Sending in normal mode
//
//
//	  HAL_UART_Transmit(&huart2,Test,strlen(Test),10);// Sending in normal mode
	  memcpy(tx_can_data, &payload_slv, sizeof(payload_slv));
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <main+0x1b8>)
 80009c4:	6811      	ldr	r1, [r2, #0]
 80009c6:	6019      	str	r1, [r3, #0]
 80009c8:	8892      	ldrh	r2, [r2, #4]
 80009ca:	809a      	strh	r2, [r3, #4]

	  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, tx_can_data, &TxMailbox) == HAL_OK) {
 80009cc:	230c      	movs	r3, #12
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	1d3a      	adds	r2, r7, #4
 80009d2:	2110      	movs	r1, #16
 80009d4:	1879      	adds	r1, r7, r1
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <main+0x1ac>)
 80009d8:	f001 fa09 	bl	8001dee <HAL_CAN_AddTxMessage>
	  } else {
	    // Błąd podczas dodawania wiadomości do kolejki transmisji
	  }

	  // Czekanie na zakończenie transmisji
	  if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 3) {
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <main+0x1ac>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fad7 	bl	8001f92 <HAL_CAN_GetTxMailboxesFreeLevel>
	    // Wszystkie skrzynki nadawcze są wolne, transmisja zakończona
	  }


	  HAL_Delay(1000);
 80009e4:	23fa      	movs	r3, #250	; 0xfa
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fbc7 	bl	800117c <HAL_Delay>
	    ds18b20_start_measure(NULL);
 80009ee:	e7cc      	b.n	800098a <main+0x142>
 80009f0:	080038ac 	.word	0x080038ac
 80009f4:	20000068 	.word	0x20000068
 80009f8:	48000400 	.word	0x48000400
 80009fc:	000002ee 	.word	0x000002ee
 8000a00:	20000090 	.word	0x20000090
 8000a04:	20000092 	.word	0x20000092

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b093      	sub	sp, #76	; 0x4c
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	2414      	movs	r4, #20
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	0018      	movs	r0, r3
 8000a14:	2334      	movs	r3, #52	; 0x34
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f002 ff32 	bl	8003882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2310      	movs	r3, #16
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f002 ff2b 	bl	8003882 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2230      	movs	r2, #48	; 0x30
 8000a32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2201      	movs	r2, #1
 8000a38:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2210      	movs	r2, #16
 8000a44:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	0252      	lsls	r2, r2, #9
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	22c0      	movs	r2, #192	; 0xc0
 8000a58:	0312      	lsls	r2, r2, #12
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV6;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2205      	movs	r2, #5
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 fd23 	bl	80024b0 <HAL_RCC_OscConfig>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a6e:	f000 f819 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f002 f894 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a98:	f000 f804 	bl	8000aa4 <Error_Handler>
  }
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b013      	add	sp, #76	; 0x4c
 8000aa2:	bd90      	pop	{r4, r7, pc}

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <smoke_sensor_read>:
#include "adc.h"


HAL_StatusTypeDef smoke_sensor_read(uint16_t* smoke_ptr){
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab8:	2408      	movs	r4, #8
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	230c      	movs	r3, #12
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 fedd 	bl	8003882 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8000ac8:	0021      	movs	r1, r4
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2205      	movs	r2, #5
 8000ace:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	0152      	lsls	r2, r2, #5
 8000ad6:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2203      	movs	r2, #3
 8000adc:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ade:	187a      	adds	r2, r7, r1
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <smoke_sensor_read+0xa8>)
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fde5 	bl	80016b4 <HAL_ADC_ConfigChannel>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <smoke_sensor_read+0x42>
	  {
		Error_Handler();
 8000aee:	f7ff ffd9 	bl	8000aa4 <Error_Handler>
	  }

	  HAL_ADC_Start(&hadc);
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <smoke_sensor_read+0xa8>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fca5 	bl	8001444 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000afa:	2301      	movs	r3, #1
 8000afc:	425a      	negs	r2, r3
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <smoke_sensor_read+0xa8>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fd32 	bl	800156c <HAL_ADC_PollForConversion>
	  uint16_t adcValue = (uint16_t)HAL_ADC_GetValue(&hadc);
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <smoke_sensor_read+0xa8>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fdc6 	bl	800169c <HAL_ADC_GetValue>
 8000b10:	0002      	movs	r2, r0
 8000b12:	2316      	movs	r3, #22
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <smoke_sensor_read+0xa8>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fce6 	bl	80014ec <HAL_ADC_Stop>

	  sConfig.Rank = ADC_RANK_NONE;
 8000b20:	2108      	movs	r1, #8
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <smoke_sensor_read+0xac>)
 8000b26:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b28:	187a      	adds	r2, r7, r1
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <smoke_sensor_read+0xa8>)
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fdc0 	bl	80016b4 <HAL_ADC_ConfigChannel>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <smoke_sensor_read+0x8c>
	  {
		Error_Handler();
 8000b38:	f7ff ffb4 	bl	8000aa4 <Error_Handler>
	  }

	  HAL_Delay(100);
 8000b3c:	2064      	movs	r0, #100	; 0x64
 8000b3e:	f000 fb1d 	bl	800117c <HAL_Delay>

	  *smoke_ptr = adcValue;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2216      	movs	r2, #22
 8000b46:	18ba      	adds	r2, r7, r2
 8000b48:	8812      	ldrh	r2, [r2, #0]
 8000b4a:	801a      	strh	r2, [r3, #0]

	  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0

}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b007      	add	sp, #28
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	00001001 	.word	0x00001001

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x50>)
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_MspInit+0x50>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	619a      	str	r2, [r3, #24]
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x50>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x50>)
 8000b80:	69da      	ldr	r2, [r3, #28]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_MspInit+0x50>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0549      	lsls	r1, r1, #21
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	61da      	str	r2, [r3, #28]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_MspInit+0x50>)
 8000b8e:	69da      	ldr	r2, [r3, #28]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	055b      	lsls	r3, r3, #21
 8000b94:	4013      	ands	r3, r2
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_MspInit+0x54>)
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 fab2 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <MX_TIM17_Init+0x48>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 39;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000bfc:	2227      	movs	r2, #39	; 0x27
 8000bfe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <MX_TIM17_Init+0x4c>)
 8000c0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <MX_TIM17_Init+0x44>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f002 f939 	bl	8002e98 <HAL_TIM_Base_Init>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000c2a:	f7ff ff3b 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000098 	.word	0x20000098
 8000c38:	40014800 	.word	0x40014800
 8000c3c:	0000ffff 	.word	0x0000ffff

08000c40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x38>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10d      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	699a      	ldr	r2, [r3, #24]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	02c9      	lsls	r1, r1, #11
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	619a      	str	r2, [r3, #24]
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_TIM_Base_MspInit+0x3c>)
 8000c62:	699a      	ldr	r2, [r3, #24]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	02db      	lsls	r3, r3, #11
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40014800 	.word	0x40014800
 8000c7c:	40021000 	.word	0x40021000

08000c80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_USART2_UART_Init+0x5c>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c8c:	22e1      	movs	r2, #225	; 0xe1
 8000c8e:	0252      	lsls	r2, r2, #9
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f002 f9f1 	bl	80030ac <HAL_UART_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cce:	f7ff fee9 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000e0 	.word	0x200000e0
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	2414      	movs	r4, #20
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f002 fdc5 	bl	8003882 <memset>
  if(uartHandle->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d132      	bne.n	8000d68 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0289      	lsls	r1, r1, #10
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	029b      	lsls	r3, r3, #10
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	0289      	lsls	r1, r1, #10
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	029b      	lsls	r3, r3, #10
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2202      	movs	r2, #2
 8000d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2203      	movs	r2, #3
 8000d52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2201      	movs	r2, #1
 8000d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	187a      	adds	r2, r7, r1
 8000d5c:	2390      	movs	r3, #144	; 0x90
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 fa02 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b00b      	add	sp, #44	; 0x2c
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	40021000 	.word	0x40021000

08000d78 <wire_init>:
#include "wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim17);
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <wire_init+0x14>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 f8da 	bl	8002f38 <HAL_TIM_Base_Start>
 8000d84:	0003      	movs	r3, r0
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000098 	.word	0x20000098

08000d90 <delay_us>:

static void delay_us(uint32_t us)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim17, 0);
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <delay_us+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim17) < us) {}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <delay_us+0x28>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d8f9      	bhi.n	8000da2 <delay_us+0x12>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000098 	.word	0x20000098

08000dbc <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	0119      	lsls	r1, r3, #4
 8000dc6:	2390      	movs	r3, #144	; 0x90
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	2200      	movs	r2, #0
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 fb52 	bl	8002476 <HAL_GPIO_WritePin>
  delay_us(480);
 8000dd2:	23f0      	movs	r3, #240	; 0xf0
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ffda 	bl	8000d90 <delay_us>
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	0119      	lsls	r1, r3, #4
 8000de0:	2390      	movs	r3, #144	; 0x90
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	2201      	movs	r2, #1
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 fb45 	bl	8002476 <HAL_GPIO_WritePin>
  delay_us(70);
 8000dec:	2046      	movs	r0, #70	; 0x46
 8000dee:	f7ff ffcf 	bl	8000d90 <delay_us>
  rc = HAL_GPIO_ReadPin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin);
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	011a      	lsls	r2, r3, #4
 8000df6:	2390      	movs	r3, #144	; 0x90
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f001 fb1d 	bl	800243c <HAL_GPIO_ReadPin>
 8000e02:	0003      	movs	r3, r0
 8000e04:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8000e06:	23cd      	movs	r3, #205	; 0xcd
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff ffc0 	bl	8000d90 <delay_us>

  if (rc == 0)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <wire_reset+0x5e>
    return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <wire_reset+0x60>
  else
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <read_bit>:

static int read_bit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	0119      	lsls	r1, r3, #4
 8000e2e:	2390      	movs	r3, #144	; 0x90
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	2200      	movs	r2, #0
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fb1e 	bl	8002476 <HAL_GPIO_WritePin>
  delay_us(6);
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ffa8 	bl	8000d90 <delay_us>
  HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	0119      	lsls	r1, r3, #4
 8000e44:	2390      	movs	r3, #144	; 0x90
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2201      	movs	r2, #1
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 fb13 	bl	8002476 <HAL_GPIO_WritePin>
  delay_us(9);
 8000e50:	2009      	movs	r0, #9
 8000e52:	f7ff ff9d 	bl	8000d90 <delay_us>
  rc = HAL_GPIO_ReadPin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin);
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	011a      	lsls	r2, r3, #4
 8000e5a:	2390      	movs	r3, #144	; 0x90
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 faeb 	bl	800243c <HAL_GPIO_ReadPin>
 8000e66:	0003      	movs	r3, r0
 8000e68:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8000e6a:	2037      	movs	r0, #55	; 0x37
 8000e6c:	f7ff ff90 	bl	8000d90 <delay_us>
  return rc;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <wire_read>:

uint8_t wire_read(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
  int i;
  for (i = 0; i < 8; i++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	e012      	b.n	8000eb2 <wire_read+0x38>
    value >>= 1;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	0852      	lsrs	r2, r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
    if (read_bit())
 8000e96:	f7ff ffc5 	bl	8000e24 <read_bit>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d006      	beq.n	8000eac <wire_read+0x32>
      value |= 0x80;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	1dfa      	adds	r2, r7, #7
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	4249      	negs	r1, r1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	dde9      	ble.n	8000e8c <wire_read+0x12>
  }
  return value;
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <write_bit>:

static void write_bit(int value)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if (value) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d016      	beq.n	8000f00 <write_bit+0x3c>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	0119      	lsls	r1, r3, #4
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	2200      	movs	r2, #0
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 faca 	bl	8002476 <HAL_GPIO_WritePin>
    delay_us(6);
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f7ff ff54 	bl	8000d90 <delay_us>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	0119      	lsls	r1, r3, #4
 8000eec:	2390      	movs	r3, #144	; 0x90
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 fabf 	bl	8002476 <HAL_GPIO_WritePin>
    delay_us(64);
 8000ef8:	2040      	movs	r0, #64	; 0x40
 8000efa:	f7ff ff49 	bl	8000d90 <delay_us>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8000efe:	e015      	b.n	8000f2c <write_bit+0x68>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_RESET);
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	0119      	lsls	r1, r3, #4
 8000f04:	2390      	movs	r3, #144	; 0x90
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 fab3 	bl	8002476 <HAL_GPIO_WritePin>
    delay_us(60);
 8000f10:	203c      	movs	r0, #60	; 0x3c
 8000f12:	f7ff ff3d 	bl	8000d90 <delay_us>
    HAL_GPIO_WritePin(ONE_WIRE_GPIO_Port, ONE_WIRE_Pin, GPIO_PIN_SET);
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	0119      	lsls	r1, r3, #4
 8000f1a:	2390      	movs	r3, #144	; 0x90
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	2201      	movs	r2, #1
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 faa8 	bl	8002476 <HAL_GPIO_WritePin>
    delay_us(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f7ff ff32 	bl	8000d90 <delay_us>
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <wire_write>:

void wire_write(uint8_t byte)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	701a      	strb	r2, [r3, #0]
  int i;
  for (i = 0; i < 8; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e00e      	b.n	8000f64 <wire_write+0x30>
    write_bit(byte & 0x01);
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff ffb8 	bl	8000ec4 <write_bit>
    byte >>= 1;
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	1dfa      	adds	r2, r7, #7
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	0852      	lsrs	r2, r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	dded      	ble.n	8000f46 <wire_write+0x12>
  }
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	1c0a      	adds	r2, r1, #0
 8000f84:	701a      	strb	r2, [r3, #0]
  int i;
  for (i = 0; i < 8; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e020      	b.n	8000fce <byte_crc+0x5a>
    uint8_t b = crc ^ byte;
 8000f8c:	200b      	movs	r0, #11
 8000f8e:	183b      	adds	r3, r7, r0
 8000f90:	1df9      	adds	r1, r7, #7
 8000f92:	1dba      	adds	r2, r7, #6
 8000f94:	7809      	ldrb	r1, [r1, #0]
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	404a      	eors	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
    crc >>= 1;
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	1dfa      	adds	r2, r7, #7
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	0852      	lsrs	r2, r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    if (b & 0x01)
 8000fa6:	183b      	adds	r3, r7, r0
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2201      	movs	r2, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	d006      	beq.n	8000fbe <byte_crc+0x4a>
      crc ^= 0x8c;
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	1dfa      	adds	r2, r7, #7
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	2174      	movs	r1, #116	; 0x74
 8000fb8:	4249      	negs	r1, r1
 8000fba:	404a      	eors	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]
    byte >>= 1;
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	1dba      	adds	r2, r7, #6
 8000fc2:	7812      	ldrb	r2, [r2, #0]
 8000fc4:	0852      	lsrs	r2, r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	dddb      	ble.n	8000f8c <byte_crc+0x18>
  }
  return crc;
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8000fea:	230b      	movs	r3, #11
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < len; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e010      	b.n	800101a <wire_crc+0x3a>
      crc = byte_crc(crc, data[i]);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	230b      	movs	r3, #11
 8001002:	18fc      	adds	r4, r7, r3
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ffb2 	bl	8000f74 <byte_crc>
 8001010:	0003      	movs	r3, r0
 8001012:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < len; i++)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	dbea      	blt.n	8000ff8 <wire_crc+0x18>

    return crc;
 8001022:	230b      	movs	r3, #11
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b005      	add	sp, #20
 800102e:	bd90      	pop	{r4, r7, pc}

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f7ff fdd7 	bl	8000be6 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <LoopForever+0x6>)
    LDR R1, [R0]
 800103a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800103c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <LoopForever+0xa>)
    CMP R1, R2
 8001040:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001042:	d105      	bne.n	8001050 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001046:	4912      	ldr	r1, [pc, #72]	; (8001090 <LoopForever+0x12>)
    STR R1, [R0]
 8001048:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800104a:	4812      	ldr	r0, [pc, #72]	; (8001094 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800104c:	4912      	ldr	r1, [pc, #72]	; (8001098 <LoopForever+0x1a>)
    STR R1, [R0]
 800104e:	6001      	str	r1, [r0, #0]

08001050 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001052:	4913      	ldr	r1, [pc, #76]	; (80010a0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001054:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <LoopForever+0x26>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001068:	4c10      	ldr	r4, [pc, #64]	; (80010ac <LoopForever+0x2e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001076:	f002 fbd7 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff fbe5 	bl	8000848 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001084:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001088:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800108c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001090:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001094:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001098:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a4:	08003900 	.word	0x08003900
  ldr r2, =_sbss
 80010a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010ac:	2000016c 	.word	0x2000016c

080010b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_IRQHandler>
	...

080010b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_Init+0x24>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_Init+0x24>)
 80010be:	2110      	movs	r1, #16
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f809 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ca:	f7ff fd49 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_InitTick+0x5c>)
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_InitTick+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	0019      	movs	r1, r3
 80010ee:	23fa      	movs	r3, #250	; 0xfa
 80010f0:	0098      	lsls	r0, r3, #2
 80010f2:	f7ff f809 	bl	8000108 <__udivsi3>
 80010f6:	0003      	movs	r3, r0
 80010f8:	0019      	movs	r1, r3
 80010fa:	0020      	movs	r0, r4
 80010fc:	f7ff f804 	bl	8000108 <__udivsi3>
 8001100:	0003      	movs	r3, r0
 8001102:	0018      	movs	r0, r3
 8001104:	f001 f825 	bl	8002152 <HAL_SYSTICK_Config>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00f      	b.n	8001130 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d80b      	bhi.n	800112e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2200      	movs	r2, #0
 800111e:	0018      	movs	r0, r3
 8001120:	f001 f802 	bl	8002128 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_InitTick+0x64>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b003      	add	sp, #12
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	001a      	movs	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	18d2      	adds	r2, r2, r3
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_IncTick+0x20>)
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	20000008 	.word	0x20000008
 8001164:	20000168 	.word	0x20000168

08001168 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000168 	.word	0x20000168

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fff0 	bl	8001168 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	001a      	movs	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	189b      	adds	r3, r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	f7ff ffe0 	bl	8001168 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	20000008 	.word	0x20000008

080011c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e125      	b.n	800142e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10a      	bne.n	8001200 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2234      	movs	r2, #52	; 0x34
 80011f4:	2100      	movs	r1, #0
 80011f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff f878 	bl	80002f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	2210      	movs	r2, #16
 8001206:	4013      	ands	r3, r2
 8001208:	d000      	beq.n	800120c <HAL_ADC_Init+0x48>
 800120a:	e103      	b.n	8001414 <HAL_ADC_Init+0x250>
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d000      	beq.n	8001218 <HAL_ADC_Init+0x54>
 8001216:	e0fd      	b.n	8001414 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2204      	movs	r2, #4
 8001220:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001222:	d000      	beq.n	8001226 <HAL_ADC_Init+0x62>
 8001224:	e0f6      	b.n	8001414 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	4a83      	ldr	r2, [pc, #524]	; (8001438 <HAL_ADC_Init+0x274>)
 800122c:	4013      	ands	r3, r2
 800122e:	2202      	movs	r2, #2
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	2b01      	cmp	r3, #1
 8001242:	d112      	bne.n	800126a <HAL_ADC_Init+0xa6>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	2b01      	cmp	r3, #1
 8001250:	d009      	beq.n	8001266 <HAL_ADC_Init+0xa2>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	401a      	ands	r2, r3
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	429a      	cmp	r2, r3
 8001264:	d101      	bne.n	800126a <HAL_ADC_Init+0xa6>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_ADC_Init+0xa8>
 800126a:	2300      	movs	r3, #0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d116      	bne.n	800129e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2218      	movs	r2, #24
 8001278:	4393      	bics	r3, r2
 800127a:	0019      	movs	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	0899      	lsrs	r1, r3, #2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4964      	ldr	r1, [pc, #400]	; (800143c <HAL_ADC_Init+0x278>)
 80012aa:	400a      	ands	r2, r1
 80012ac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7e1b      	ldrb	r3, [r3, #24]
 80012b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7e5b      	ldrb	r3, [r3, #25]
 80012b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e9b      	ldrb	r3, [r3, #26]
 80012c0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d002      	beq.n	80012d2 <HAL_ADC_Init+0x10e>
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	e000      	b.n	80012d4 <HAL_ADC_Init+0x110>
 80012d2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012da:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_Init+0x124>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e000      	b.n	80012ea <HAL_ADC_Init+0x126>
 80012e8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2124      	movs	r1, #36	; 0x24
 80012f0:	5c5b      	ldrb	r3, [r3, r1]
 80012f2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7edb      	ldrb	r3, [r3, #27]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d115      	bne.n	8001330 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e9b      	ldrb	r3, [r3, #26]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	0252      	lsls	r2, r2, #9
 8001312:	4313      	orrs	r3, r2
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	e00b      	b.n	8001330 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	2220      	movs	r2, #32
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001328:	2201      	movs	r2, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	23c2      	movs	r3, #194	; 0xc2
 8001336:	33ff      	adds	r3, #255	; 0xff
 8001338:	429a      	cmp	r2, r3
 800133a:	d007      	beq.n	800134c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001344:	4313      	orrs	r3, r2
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	4313      	orrs	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68d9      	ldr	r1, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	430a      	orrs	r2, r1
 800135a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	055b      	lsls	r3, r3, #21
 8001364:	429a      	cmp	r2, r3
 8001366:	d01b      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2b01      	cmp	r3, #1
 800136e:	d017      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	2b02      	cmp	r3, #2
 8001376:	d013      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b03      	cmp	r3, #3
 800137e:	d00f      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00b      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b05      	cmp	r3, #5
 800138e:	d007      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	2b06      	cmp	r3, #6
 8001396:	d003      	beq.n	80013a0 <HAL_ADC_Init+0x1dc>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b07      	cmp	r3, #7
 800139e:	d112      	bne.n	80013c6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2107      	movs	r1, #7
 80013ac:	438a      	bics	r2, r1
 80013ae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6959      	ldr	r1, [r3, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	2207      	movs	r2, #7
 80013bc:	401a      	ands	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_ADC_Init+0x27c>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d10b      	bne.n	80013ee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	2203      	movs	r2, #3
 80013e2:	4393      	bics	r3, r2
 80013e4:	2201      	movs	r2, #1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013ec:	e01c      	b.n	8001428 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	2212      	movs	r2, #18
 80013f4:	4393      	bics	r3, r2
 80013f6:	2210      	movs	r2, #16
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001402:	2201      	movs	r2, #1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800140a:	230f      	movs	r3, #15
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001412:	e009      	b.n	8001428 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	2210      	movs	r2, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	781b      	ldrb	r3, [r3, #0]
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	fffffefd 	.word	0xfffffefd
 800143c:	fffe0219 	.word	0xfffe0219
 8001440:	833fffe7 	.word	0x833fffe7

08001444 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2204      	movs	r2, #4
 800145c:	4013      	ands	r3, r2
 800145e:	d138      	bne.n	80014d2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2234      	movs	r2, #52	; 0x34
 8001464:	5c9b      	ldrb	r3, [r3, r2]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Start+0x2a>
 800146a:	2302      	movs	r3, #2
 800146c:	e038      	b.n	80014e0 <HAL_ADC_Start+0x9c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2234      	movs	r2, #52	; 0x34
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7e5b      	ldrb	r3, [r3, #25]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d007      	beq.n	800148e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800147e:	230f      	movs	r3, #15
 8001480:	18fc      	adds	r4, r7, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fa2d 	bl	80018e4 <ADC_Enable>
 800148a:	0003      	movs	r3, r0
 800148c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800148e:	230f      	movs	r3, #15
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d120      	bne.n	80014da <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <HAL_ADC_Start+0xa4>)
 800149e:	4013      	ands	r3, r2
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	0052      	lsls	r2, r2, #1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2234      	movs	r2, #52	; 0x34
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	221c      	movs	r2, #28
 80014be:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2104      	movs	r1, #4
 80014cc:	430a      	orrs	r2, r1
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	e003      	b.n	80014da <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014d2:	230f      	movs	r3, #15
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2202      	movs	r2, #2
 80014d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014da:	230f      	movs	r3, #15
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	781b      	ldrb	r3, [r3, #0]
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b005      	add	sp, #20
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	fffff0fe 	.word	0xfffff0fe

080014ec <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2234      	movs	r2, #52	; 0x34
 8001500:	5c9b      	ldrb	r3, [r3, r2]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADC_Stop+0x1e>
 8001506:	2302      	movs	r3, #2
 8001508:	e029      	b.n	800155e <HAL_ADC_Stop+0x72>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2234      	movs	r2, #52	; 0x34
 800150e:	2101      	movs	r1, #1
 8001510:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001512:	250f      	movs	r5, #15
 8001514:	197c      	adds	r4, r7, r5
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f000 fad8 	bl	8001ace <ADC_ConversionStop>
 800151e:	0003      	movs	r3, r0
 8001520:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001522:	197b      	adds	r3, r7, r5
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d112      	bne.n	8001550 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800152a:	197c      	adds	r4, r7, r5
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	0018      	movs	r0, r3
 8001530:	f000 fa5c 	bl	80019ec <ADC_Disable>
 8001534:	0003      	movs	r3, r0
 8001536:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001538:	197b      	adds	r3, r7, r5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_ADC_Stop+0x7c>)
 8001546:	4013      	ands	r3, r2
 8001548:	2201      	movs	r2, #1
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2234      	movs	r2, #52	; 0x34
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001558:	230f      	movs	r3, #15
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	781b      	ldrb	r3, [r3, #0]
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b004      	add	sp, #16
 8001564:	bdb0      	pop	{r4, r5, r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	fffffefe 	.word	0xfffffefe

0800156c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b08      	cmp	r3, #8
 800157c:	d102      	bne.n	8001584 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800157e:	2308      	movs	r3, #8
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e014      	b.n	80015ae <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10b      	bne.n	80015aa <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	2220      	movs	r2, #32
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2234      	movs	r2, #52	; 0x34
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e071      	b.n	800168e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015aa:	230c      	movs	r3, #12
 80015ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015ae:	f7ff fddb 	bl	8001168 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015b6:	e01f      	b.n	80015f8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	d01c      	beq.n	80015f8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_ADC_PollForConversion+0x68>
 80015c4:	f7ff fdd0 	bl	8001168 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d211      	bcs.n	80015f8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	d10b      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e4:	2204      	movs	r2, #4
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e04a      	b.n	800168e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	d0d9      	beq.n	80015b8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	23c0      	movs	r3, #192	; 0xc0
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4013      	ands	r3, r2
 800161e:	d12d      	bne.n	800167c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001624:	2b00      	cmp	r3, #0
 8001626:	d129      	bne.n	800167c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2208      	movs	r2, #8
 8001630:	4013      	ands	r3, r2
 8001632:	2b08      	cmp	r3, #8
 8001634:	d122      	bne.n	800167c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2204      	movs	r2, #4
 800163e:	4013      	ands	r3, r2
 8001640:	d110      	bne.n	8001664 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	210c      	movs	r1, #12
 800164e:	438a      	bics	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_ADC_PollForConversion+0x12c>)
 8001658:	4013      	ands	r3, r2
 800165a:	2201      	movs	r2, #1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
 8001662:	e00b      	b.n	800167c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	2220      	movs	r2, #32
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	2201      	movs	r2, #1
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	220c      	movs	r2, #12
 800168a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b004      	add	sp, #16
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	fffffefe 	.word	0xfffffefe

0800169c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016be:	230f      	movs	r3, #15
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	055b      	lsls	r3, r3, #21
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d011      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x46>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d00d      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x46>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d009      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x46>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d005      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x46>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d001      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x46>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2234      	movs	r2, #52	; 0x34
 80016fe:	5c9b      	ldrb	r3, [r3, r2]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x54>
 8001704:	2302      	movs	r3, #2
 8001706:	e0d0      	b.n	80018aa <HAL_ADC_ConfigChannel+0x1f6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2234      	movs	r2, #52	; 0x34
 800170c:	2101      	movs	r1, #1
 800170e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2204      	movs	r2, #4
 8001718:	4013      	ands	r3, r2
 800171a:	d000      	beq.n	800171e <HAL_ADC_ConfigChannel+0x6a>
 800171c:	e0b4      	b.n	8001888 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a64      	ldr	r2, [pc, #400]	; (80018b4 <HAL_ADC_ConfigChannel+0x200>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_ADC_ConfigChannel+0x76>
 8001728:	e082      	b.n	8001830 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	055b      	lsls	r3, r3, #21
 8001748:	429a      	cmp	r2, r3
 800174a:	d037      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b01      	cmp	r3, #1
 8001752:	d033      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	2b02      	cmp	r3, #2
 800175a:	d02f      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b03      	cmp	r3, #3
 8001762:	d02b      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	2b04      	cmp	r3, #4
 800176a:	d027      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b05      	cmp	r3, #5
 8001772:	d023      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b06      	cmp	r3, #6
 800177a:	d01f      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b07      	cmp	r3, #7
 8001782:	d01b      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2107      	movs	r1, #7
 8001790:	400b      	ands	r3, r1
 8001792:	429a      	cmp	r2, r3
 8001794:	d012      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2107      	movs	r1, #7
 80017a2:	438a      	bics	r2, r1
 80017a4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6959      	ldr	r1, [r3, #20]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2207      	movs	r2, #7
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d007      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x120>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d003      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x120>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d163      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017d4:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <HAL_ADC_ConfigChannel+0x204>)
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d009      	beq.n	80017f4 <HAL_ADC_ConfigChannel+0x140>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b11      	cmp	r3, #17
 80017e6:	d102      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x13a>
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	03db      	lsls	r3, r3, #15
 80017ec:	e004      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x144>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	045b      	lsls	r3, r3, #17
 80017f2:	e001      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x144>
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <HAL_ADC_ConfigChannel+0x204>)
 80017fa:	430b      	orrs	r3, r1
 80017fc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d14a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_ADC_ConfigChannel+0x208>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	492d      	ldr	r1, [pc, #180]	; (80018c0 <HAL_ADC_ConfigChannel+0x20c>)
 800180c:	0018      	movs	r0, r3
 800180e:	f7fe fc7b 	bl	8000108 <__udivsi3>
 8001812:	0003      	movs	r3, r0
 8001814:	001a      	movs	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	189b      	adds	r3, r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001820:	e002      	b.n	8001828 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x16e>
 800182e:	e035      	b.n	800189c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2101      	movs	r1, #1
 800183c:	4099      	lsls	r1, r3
 800183e:	000b      	movs	r3, r1
 8001840:	43d9      	mvns	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	400a      	ands	r2, r1
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d007      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x1ae>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b11      	cmp	r3, #17
 8001858:	d003      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x1ae>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d11c      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_ADC_ConfigChannel+0x204>)
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b10      	cmp	r3, #16
 800186c:	d007      	beq.n	800187e <HAL_ADC_ConfigChannel+0x1ca>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b11      	cmp	r3, #17
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x1c6>
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_ADC_ConfigChannel+0x210>)
 8001878:	e002      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1cc>
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_ADC_ConfigChannel+0x214>)
 800187c:	e000      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1cc>
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_ADC_ConfigChannel+0x218>)
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_ADC_ConfigChannel+0x204>)
 8001882:	400b      	ands	r3, r1
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e009      	b.n	800189c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	2220      	movs	r2, #32
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001894:	230f      	movs	r3, #15
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2234      	movs	r2, #52	; 0x34
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	00001001 	.word	0x00001001
 80018b8:	40012708 	.word	0x40012708
 80018bc:	20000000 	.word	0x20000000
 80018c0:	000f4240 	.word	0x000f4240
 80018c4:	ffbfffff 	.word	0xffbfffff
 80018c8:	feffffff 	.word	0xfeffffff
 80018cc:	ff7fffff 	.word	0xff7fffff

080018d0 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2203      	movs	r2, #3
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d112      	bne.n	8001928 <ADC_Enable+0x44>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	2b01      	cmp	r3, #1
 800190e:	d009      	beq.n	8001924 <ADC_Enable+0x40>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	401a      	ands	r2, r3
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	429a      	cmp	r2, r3
 8001922:	d101      	bne.n	8001928 <ADC_Enable+0x44>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <ADC_Enable+0x46>
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d152      	bne.n	80019d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a2a      	ldr	r2, [pc, #168]	; (80019e0 <ADC_Enable+0xfc>)
 8001936:	4013      	ands	r3, r2
 8001938:	d00d      	beq.n	8001956 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	2210      	movs	r2, #16
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	2201      	movs	r2, #1
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e03f      	b.n	80019d6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <ADC_Enable+0x100>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	491f      	ldr	r1, [pc, #124]	; (80019e8 <ADC_Enable+0x104>)
 800196c:	0018      	movs	r0, r3
 800196e:	f7fe fbcb 	bl	8000108 <__udivsi3>
 8001972:	0003      	movs	r3, r0
 8001974:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001976:	e002      	b.n	800197e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3b01      	subs	r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f9      	bne.n	8001978 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001984:	f7ff fbf0 	bl	8001168 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800198c:	e01b      	b.n	80019c6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800198e:	f7ff fbeb 	bl	8001168 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d914      	bls.n	80019c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d00d      	beq.n	80019c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	2210      	movs	r2, #16
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2201      	movs	r2, #1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e007      	b.n	80019d6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d1dc      	bne.n	800198e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	80000017 	.word	0x80000017
 80019e4:	20000000 	.word	0x20000000
 80019e8:	000f4240 	.word	0x000f4240

080019ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2203      	movs	r2, #3
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d112      	bne.n	8001a2c <ADC_Disable+0x40>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d009      	beq.n	8001a28 <ADC_Disable+0x3c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	401a      	ands	r2, r3
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d101      	bne.n	8001a2c <ADC_Disable+0x40>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <ADC_Disable+0x42>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d048      	beq.n	8001ac4 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d110      	bne.n	8001a62 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2203      	movs	r2, #3
 8001a56:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a58:	f7ff fb86 	bl	8001168 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a60:	e029      	b.n	8001ab6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	2210      	movs	r2, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a72:	2201      	movs	r2, #1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e023      	b.n	8001ac6 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a7e:	f7ff fb73 	bl	8001168 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d914      	bls.n	8001ab6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10d      	bne.n	8001ab6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2201      	movs	r2, #1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e007      	b.n	8001ac6 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d0dc      	beq.n	8001a7e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}

08001ace <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d03a      	beq.n	8001b5c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2204      	movs	r2, #4
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d10d      	bne.n	8001b10 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001afe:	d107      	bne.n	8001b10 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b10:	f7ff fb2a 	bl	8001168 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b18:	e01a      	b.n	8001b50 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b1a:	f7ff fb25 	bl	8001168 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d913      	bls.n	8001b50 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4013      	ands	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	2210      	movs	r2, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	2201      	movs	r2, #1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e006      	b.n	8001b5e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d1de      	bne.n	8001b1a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0f0      	b.n	8001d5a <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	5c9b      	ldrb	r3, [r3, r2]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe fc30 	bl	80003ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9c:	f7ff fae4 	bl	8001168 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ba4:	e013      	b.n	8001bce <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ba6:	f7ff fadf 	bl	8001168 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b0a      	cmp	r3, #10
 8001bb2:	d90c      	bls.n	8001bce <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0292      	lsls	r2, r2, #10
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0c5      	b.n	8001d5a <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0e5      	beq.n	8001ba6 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2102      	movs	r1, #2
 8001be6:	438a      	bics	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bea:	f7ff fabd 	bl	8001168 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bf2:	e013      	b.n	8001c1c <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bf4:	f7ff fab8 	bl	8001168 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b0a      	cmp	r3, #10
 8001c00:	d90c      	bls.n	8001c1c <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	0292      	lsls	r2, r2, #10
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	2105      	movs	r1, #5
 8001c16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e09e      	b.n	8001d5a <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d1e5      	bne.n	8001bf4 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e007      	b.n	8001c52 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	438a      	bics	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7e5b      	ldrb	r3, [r3, #25]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d108      	bne.n	8001c6c <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e007      	b.n	8001c7c <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	438a      	bics	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7e9b      	ldrb	r3, [r3, #26]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d108      	bne.n	8001c96 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2120      	movs	r1, #32
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e007      	b.n	8001ca6 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7edb      	ldrb	r3, [r3, #27]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d108      	bne.n	8001cc0 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2110      	movs	r1, #16
 8001cba:	438a      	bics	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e007      	b.n	8001cd0 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7f1b      	ldrb	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e007      	b.n	8001cfa <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7f5b      	ldrb	r3, [r3, #29]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e007      	b.n	8001d24 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2104      	movs	r1, #4
 8001d20:	438a      	bics	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	2101      	movs	r1, #1
 8001d56:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	5c9b      	ldrb	r3, [r3, r2]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d12f      	bne.n	8001dd6 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	438a      	bics	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d8e:	f7ff f9eb 	bl	8001168 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d96:	e013      	b.n	8001dc0 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d98:	f7ff f9e6 	bl	8001168 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b0a      	cmp	r3, #10
 8001da4:	d90c      	bls.n	8001dc0 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	0292      	lsls	r2, r2, #10
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	2105      	movs	r1, #5
 8001dba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e012      	b.n	8001de6 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d1e5      	bne.n	8001d98 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	0312      	lsls	r2, r2, #12
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
  }
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b088      	sub	sp, #32
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dfc:	201f      	movs	r0, #31
 8001dfe:	183b      	adds	r3, r7, r0
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	2120      	movs	r1, #32
 8001e04:	5c52      	ldrb	r2, [r2, r1]
 8001e06:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e10:	183b      	adds	r3, r7, r0
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d004      	beq.n	8001e22 <HAL_CAN_AddTxMessage+0x34>
 8001e18:	183b      	adds	r3, r7, r0
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d000      	beq.n	8001e22 <HAL_CAN_AddTxMessage+0x34>
 8001e20:	e0ab      	b.n	8001f7a <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	04db      	lsls	r3, r3, #19
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d10a      	bne.n	8001e42 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	051b      	lsls	r3, r3, #20
 8001e32:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e34:	d105      	bne.n	8001e42 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	055b      	lsls	r3, r3, #21
 8001e3c:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e3e:	d100      	bne.n	8001e42 <HAL_CAN_AddTxMessage+0x54>
 8001e40:	e092      	b.n	8001f68 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	0e1b      	lsrs	r3, r3, #24
 8001e46:	2203      	movs	r2, #3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	409a      	lsls	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	3218      	adds	r2, #24
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	50d1      	str	r1, [r2, r3]
 8001e76:	e00f      	b.n	8001e98 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e82:	431a      	orrs	r2, r3
 8001e84:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001e8e:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	3218      	adds	r2, #24
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6819      	ldr	r1, [r3, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	18cb      	adds	r3, r1, r3
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	7d1b      	ldrb	r3, [r3, #20]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d112      	bne.n	8001eda <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3318      	adds	r3, #24
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6819      	ldr	r1, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	18cb      	adds	r3, r1, r3
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3307      	adds	r3, #7
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	061a      	lsls	r2, r3, #24
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3306      	adds	r3, #6
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3305      	adds	r3, #5
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	0019      	movs	r1, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	6979      	ldr	r1, [r7, #20]
 8001f06:	23c6      	movs	r3, #198	; 0xc6
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	0109      	lsls	r1, r1, #4
 8001f0c:	1841      	adds	r1, r0, r1
 8001f0e:	18cb      	adds	r3, r1, r3
 8001f10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3303      	adds	r3, #3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	061a      	lsls	r2, r3, #24
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3301      	adds	r3, #1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	0019      	movs	r1, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	6979      	ldr	r1, [r7, #20]
 8001f3c:	23c4      	movs	r3, #196	; 0xc4
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	0109      	lsls	r1, r1, #4
 8001f42:	1841      	adds	r1, r0, r1
 8001f44:	18cb      	adds	r3, r1, r3
 8001f46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	3218      	adds	r2, #24
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	58d2      	ldr	r2, [r2, r3]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	3218      	adds	r2, #24
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e010      	b.n	8001f8a <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	0392      	lsls	r2, r2, #14
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	02d2      	lsls	r2, r2, #11
 8001f82:	431a      	orrs	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
  }
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b008      	add	sp, #32
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9e:	200b      	movs	r0, #11
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	5c52      	ldrb	r2, [r2, r1]
 8001fa8:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001faa:	0002      	movs	r2, r0
 8001fac:	18bb      	adds	r3, r7, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d003      	beq.n	8001fbc <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8001fb4:	18bb      	adds	r3, r7, r2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d11d      	bne.n	8001ff8 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	04db      	lsls	r3, r3, #19
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d002      	beq.n	8001fd0 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	051b      	lsls	r3, r3, #20
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d002      	beq.n	8001fe4 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	055b      	lsls	r3, r3, #21
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d002      	beq.n	8001ff8 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b004      	add	sp, #16
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	0002      	movs	r2, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b7f      	cmp	r3, #127	; 0x7f
 8002018:	d828      	bhi.n	800206c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <__NVIC_SetPriority+0xd4>)
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b25b      	sxtb	r3, r3
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	33c0      	adds	r3, #192	; 0xc0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	589b      	ldr	r3, [r3, r2]
 800202a:	1dfa      	adds	r2, r7, #7
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	0011      	movs	r1, r2
 8002030:	2203      	movs	r2, #3
 8002032:	400a      	ands	r2, r1
 8002034:	00d2      	lsls	r2, r2, #3
 8002036:	21ff      	movs	r1, #255	; 0xff
 8002038:	4091      	lsls	r1, r2
 800203a:	000a      	movs	r2, r1
 800203c:	43d2      	mvns	r2, r2
 800203e:	401a      	ands	r2, r3
 8002040:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	22ff      	movs	r2, #255	; 0xff
 8002048:	401a      	ands	r2, r3
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	0018      	movs	r0, r3
 8002050:	2303      	movs	r3, #3
 8002052:	4003      	ands	r3, r0
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002058:	481f      	ldr	r0, [pc, #124]	; (80020d8 <__NVIC_SetPriority+0xd4>)
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b25b      	sxtb	r3, r3
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	430a      	orrs	r2, r1
 8002064:	33c0      	adds	r3, #192	; 0xc0
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800206a:	e031      	b.n	80020d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <__NVIC_SetPriority+0xd8>)
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	0019      	movs	r1, r3
 8002074:	230f      	movs	r3, #15
 8002076:	400b      	ands	r3, r1
 8002078:	3b08      	subs	r3, #8
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3306      	adds	r3, #6
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	1dfa      	adds	r2, r7, #7
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	0011      	movs	r1, r2
 800208c:	2203      	movs	r2, #3
 800208e:	400a      	ands	r2, r1
 8002090:	00d2      	lsls	r2, r2, #3
 8002092:	21ff      	movs	r1, #255	; 0xff
 8002094:	4091      	lsls	r1, r2
 8002096:	000a      	movs	r2, r1
 8002098:	43d2      	mvns	r2, r2
 800209a:	401a      	ands	r2, r3
 800209c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	401a      	ands	r2, r3
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	0018      	movs	r0, r3
 80020ac:	2303      	movs	r3, #3
 80020ae:	4003      	ands	r3, r0
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <__NVIC_SetPriority+0xd8>)
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	001c      	movs	r4, r3
 80020bc:	230f      	movs	r3, #15
 80020be:	4023      	ands	r3, r4
 80020c0:	3b08      	subs	r3, #8
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	430a      	orrs	r2, r1
 80020c6:	3306      	adds	r3, #6
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	18c3      	adds	r3, r0, r3
 80020cc:	3304      	adds	r3, #4
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b003      	add	sp, #12
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	045b      	lsls	r3, r3, #17
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d301      	bcc.n	80020f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f4:	2301      	movs	r3, #1
 80020f6:	e010      	b.n	800211a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <SysTick_Config+0x44>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	3a01      	subs	r2, #1
 80020fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002100:	2301      	movs	r3, #1
 8002102:	425b      	negs	r3, r3
 8002104:	2103      	movs	r1, #3
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ff7c 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x44>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x44>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	210f      	movs	r1, #15
 8002134:	187b      	adds	r3, r7, r1
 8002136:	1c02      	adds	r2, r0, #0
 8002138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	187b      	adds	r3, r7, r1
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b25b      	sxtb	r3, r3
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff ffbf 	bl	80020e0 <SysTick_Config>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e149      	b.n	8002410 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4091      	lsls	r1, r2
 8002186:	000a      	movs	r2, r1
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d100      	bne.n	8002194 <HAL_GPIO_Init+0x28>
 8002192:	e13a      	b.n	800240a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2203      	movs	r2, #3
 800219a:	4013      	ands	r3, r2
 800219c:	2b01      	cmp	r3, #1
 800219e:	d005      	beq.n	80021ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d130      	bne.n	800220e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	409a      	lsls	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	43da      	mvns	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	0013      	movs	r3, r2
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e2:	2201      	movs	r2, #1
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
 80021e8:	0013      	movs	r3, r2
 80021ea:	43da      	mvns	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	2201      	movs	r2, #1
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
 8002200:	0013      	movs	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	4013      	ands	r3, r2
 8002216:	2b03      	cmp	r3, #3
 8002218:	d017      	beq.n	800224a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	43da      	mvns	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	4013      	ands	r3, r2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d123      	bne.n	800229e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	58d3      	ldr	r3, [r2, r3]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2207      	movs	r2, #7
 8002268:	4013      	ands	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	43da      	mvns	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2107      	movs	r1, #7
 8002282:	400b      	ands	r3, r1
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	409a      	lsls	r2, r3
 8002288:	0013      	movs	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	43da      	mvns	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	401a      	ands	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	23c0      	movs	r3, #192	; 0xc0
 80022d8:	029b      	lsls	r3, r3, #10
 80022da:	4013      	ands	r3, r2
 80022dc:	d100      	bne.n	80022e0 <HAL_GPIO_Init+0x174>
 80022de:	e094      	b.n	800240a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e0:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	619a      	str	r2, [r3, #24]
 80022ec:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <HAL_GPIO_Init+0x2bc>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f8:	4a4c      	ldr	r2, [pc, #304]	; (800242c <HAL_GPIO_Init+0x2c0>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	589b      	ldr	r3, [r3, r2]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2203      	movs	r2, #3
 800230a:	4013      	ands	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	409a      	lsls	r2, r3
 8002312:	0013      	movs	r3, r2
 8002314:	43da      	mvns	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	2390      	movs	r3, #144	; 0x90
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	429a      	cmp	r2, r3
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x1d6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a41      	ldr	r2, [pc, #260]	; (8002430 <HAL_GPIO_Init+0x2c4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x1d2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a40      	ldr	r2, [pc, #256]	; (8002434 <HAL_GPIO_Init+0x2c8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x1ce>
 8002336:	2302      	movs	r3, #2
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x1d8>
 800233a:	2305      	movs	r3, #5
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x1d8>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x1d8>
 8002342:	2300      	movs	r3, #0
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	2103      	movs	r1, #3
 8002348:	400a      	ands	r2, r1
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x2c0>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43da      	mvns	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	035b      	lsls	r3, r3, #13
 800237a:	4013      	ands	r3, r2
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43da      	mvns	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	039b      	lsls	r3, r3, #14
 80023a4:	4013      	ands	r3, r2
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43da      	mvns	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	029b      	lsls	r3, r3, #10
 80023ce:	4013      	ands	r3, r2
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	4013      	ands	r3, r2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_GPIO_Init+0x2cc>)
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	40da      	lsrs	r2, r3
 8002418:	1e13      	subs	r3, r2, #0
 800241a:	d000      	beq.n	800241e <HAL_GPIO_Init+0x2b2>
 800241c:	e6ae      	b.n	800217c <HAL_GPIO_Init+0x10>
  } 
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b006      	add	sp, #24
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	48000400 	.word	0x48000400
 8002434:	48000800 	.word	0x48000800
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	000a      	movs	r2, r1
 8002446:	1cbb      	adds	r3, r7, #2
 8002448:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	1cba      	adds	r2, r7, #2
 8002450:	8812      	ldrh	r2, [r2, #0]
 8002452:	4013      	ands	r3, r2
 8002454:	d004      	beq.n	8002460 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002456:	230f      	movs	r3, #15
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e003      	b.n	8002468 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002460:	230f      	movs	r3, #15
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002468:	230f      	movs	r3, #15
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	781b      	ldrb	r3, [r3, #0]
  }
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	0008      	movs	r0, r1
 8002480:	0011      	movs	r1, r2
 8002482:	1cbb      	adds	r3, r7, #2
 8002484:	1c02      	adds	r2, r0, #0
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	1c7b      	adds	r3, r7, #1
 800248a:	1c0a      	adds	r2, r1, #0
 800248c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248e:	1c7b      	adds	r3, r7, #1
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002496:	1cbb      	adds	r3, r7, #2
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800249e:	e003      	b.n	80024a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a0:	1cbb      	adds	r3, r7, #2
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	f000 fb76 	bl	8002bb0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	d100      	bne.n	80024d0 <HAL_RCC_OscConfig+0x20>
 80024ce:	e08e      	b.n	80025ee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024d0:	4bc5      	ldr	r3, [pc, #788]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	220c      	movs	r2, #12
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00e      	beq.n	80024fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024dc:	4bc2      	ldr	r3, [pc, #776]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	220c      	movs	r2, #12
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d117      	bne.n	8002518 <HAL_RCC_OscConfig+0x68>
 80024e8:	4bbf      	ldr	r3, [pc, #764]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	23c0      	movs	r3, #192	; 0xc0
 80024ee:	025b      	lsls	r3, r3, #9
 80024f0:	401a      	ands	r2, r3
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	025b      	lsls	r3, r3, #9
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10e      	bne.n	8002518 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fa:	4bbb      	ldr	r3, [pc, #748]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	029b      	lsls	r3, r3, #10
 8002502:	4013      	ands	r3, r2
 8002504:	d100      	bne.n	8002508 <HAL_RCC_OscConfig+0x58>
 8002506:	e071      	b.n	80025ec <HAL_RCC_OscConfig+0x13c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d000      	beq.n	8002512 <HAL_RCC_OscConfig+0x62>
 8002510:	e06c      	b.n	80025ec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f000 fb4c 	bl	8002bb0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x80>
 8002520:	4bb1      	ldr	r3, [pc, #708]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4bb0      	ldr	r3, [pc, #704]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	0249      	lsls	r1, r1, #9
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e02f      	b.n	8002590 <HAL_RCC_OscConfig+0xe0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10c      	bne.n	8002552 <HAL_RCC_OscConfig+0xa2>
 8002538:	4bab      	ldr	r3, [pc, #684]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4baa      	ldr	r3, [pc, #680]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800253e:	49ab      	ldr	r1, [pc, #684]	; (80027ec <HAL_RCC_OscConfig+0x33c>)
 8002540:	400a      	ands	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4ba8      	ldr	r3, [pc, #672]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4ba7      	ldr	r3, [pc, #668]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800254a:	49a9      	ldr	r1, [pc, #676]	; (80027f0 <HAL_RCC_OscConfig+0x340>)
 800254c:	400a      	ands	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e01e      	b.n	8002590 <HAL_RCC_OscConfig+0xe0>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d10e      	bne.n	8002578 <HAL_RCC_OscConfig+0xc8>
 800255a:	4ba3      	ldr	r3, [pc, #652]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4ba2      	ldr	r3, [pc, #648]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	02c9      	lsls	r1, r1, #11
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	4b9f      	ldr	r3, [pc, #636]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b9e      	ldr	r3, [pc, #632]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xe0>
 8002578:	4b9b      	ldr	r3, [pc, #620]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b9a      	ldr	r3, [pc, #616]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800257e:	499b      	ldr	r1, [pc, #620]	; (80027ec <HAL_RCC_OscConfig+0x33c>)
 8002580:	400a      	ands	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b98      	ldr	r3, [pc, #608]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b97      	ldr	r3, [pc, #604]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800258a:	4999      	ldr	r1, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x340>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d014      	beq.n	80025c2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fde6 	bl	8001168 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a2:	f7fe fde1 	bl	8001168 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b64      	cmp	r3, #100	; 0x64
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e2fd      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b4:	4b8c      	ldr	r3, [pc, #560]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	4013      	ands	r3, r2
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0xf2>
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe fdd1 	bl	8001168 <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fdcc 	bl	8001168 <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e2e8      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	029b      	lsls	r3, r3, #10
 80025e6:	4013      	ands	r3, r2
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x11c>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	d100      	bne.n	80025fa <HAL_RCC_OscConfig+0x14a>
 80025f8:	e06c      	b.n	80026d4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025fa:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	220c      	movs	r2, #12
 8002600:	4013      	ands	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002604:	4b78      	ldr	r3, [pc, #480]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	220c      	movs	r2, #12
 800260a:	4013      	ands	r3, r2
 800260c:	2b08      	cmp	r3, #8
 800260e:	d11f      	bne.n	8002650 <HAL_RCC_OscConfig+0x1a0>
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	23c0      	movs	r3, #192	; 0xc0
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	401a      	ands	r2, r3
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	429a      	cmp	r2, r3
 8002620:	d116      	bne.n	8002650 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x188>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e2bb      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	22f8      	movs	r2, #248	; 0xf8
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00da      	lsls	r2, r3, #3
 8002648:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	e041      	b.n	80026d4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d024      	beq.n	80026a2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe fd80 	bl	8001168 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266e:	f7fe fd7b 	bl	8001168 <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e297      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d0f1      	beq.n	800266e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	22f8      	movs	r2, #248	; 0xf8
 8002690:	4393      	bics	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e018      	b.n	80026d4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	438a      	bics	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fd5b 	bl	8001168 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b8:	f7fe fd56 	bl	8001168 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e272      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d1f1      	bne.n	80026b8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	4013      	ands	r3, r2
 80026dc:	d036      	beq.n	800274c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d019      	beq.n	800271a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80026e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fd39 	bl	8001168 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe fd34 	bl	8001168 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e250      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d0f1      	beq.n	80026fc <HAL_RCC_OscConfig+0x24c>
 8002718:	e018      	b.n	800274c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800271c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271e:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002720:	2101      	movs	r1, #1
 8002722:	438a      	bics	r2, r1
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7fe fd1f 	bl	8001168 <HAL_GetTick>
 800272a:	0003      	movs	r3, r0
 800272c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002730:	f7fe fd1a 	bl	8001168 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e236      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	d1f1      	bne.n	8002730 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	d100      	bne.n	8002758 <HAL_RCC_OscConfig+0x2a8>
 8002756:	e0b5      	b.n	80028c4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002758:	201f      	movs	r0, #31
 800275a:	183b      	adds	r3, r7, r0
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	055b      	lsls	r3, r3, #21
 8002768:	4013      	ands	r3, r2
 800276a:	d110      	bne.n	800278e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	0549      	lsls	r1, r1, #21
 8002776:	430a      	orrs	r2, r1
 8002778:	61da      	str	r2, [r3, #28]
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002788:	183b      	adds	r3, r7, r0
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_OscConfig+0x344>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4013      	ands	r3, r2
 8002798:	d11a      	bne.n	80027d0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_RCC_OscConfig+0x344>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x344>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0049      	lsls	r1, r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fcde 	bl	8001168 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fe fcd9 	bl	8001168 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1f5      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x344>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10f      	bne.n	80027f8 <HAL_RCC_OscConfig+0x348>
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80027de:	2101      	movs	r1, #1
 80027e0:	430a      	orrs	r2, r1
 80027e2:	621a      	str	r2, [r3, #32]
 80027e4:	e036      	b.n	8002854 <HAL_RCC_OscConfig+0x3a4>
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40021000 	.word	0x40021000
 80027ec:	fffeffff 	.word	0xfffeffff
 80027f0:	fffbffff 	.word	0xfffbffff
 80027f4:	40007000 	.word	0x40007000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x36a>
 8002800:	4bca      	ldr	r3, [pc, #808]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4bc9      	ldr	r3, [pc, #804]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002806:	2101      	movs	r1, #1
 8002808:	438a      	bics	r2, r1
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	4bc7      	ldr	r3, [pc, #796]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	4bc6      	ldr	r3, [pc, #792]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002812:	2104      	movs	r1, #4
 8002814:	438a      	bics	r2, r1
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x3a4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b05      	cmp	r3, #5
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x38c>
 8002822:	4bc2      	ldr	r3, [pc, #776]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	4bc1      	ldr	r3, [pc, #772]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002828:	2104      	movs	r1, #4
 800282a:	430a      	orrs	r2, r1
 800282c:	621a      	str	r2, [r3, #32]
 800282e:	4bbf      	ldr	r3, [pc, #764]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	4bbe      	ldr	r3, [pc, #760]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002834:	2101      	movs	r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0x3a4>
 800283c:	4bbb      	ldr	r3, [pc, #748]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4bba      	ldr	r3, [pc, #744]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
 8002848:	4bb8      	ldr	r3, [pc, #736]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4bb7      	ldr	r3, [pc, #732]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800284e:	2104      	movs	r1, #4
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d014      	beq.n	8002886 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7fe fc84 	bl	8001168 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e009      	b.n	800287a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe fc7f 	bl	8001168 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	4aaf      	ldr	r2, [pc, #700]	; (8002b30 <HAL_RCC_OscConfig+0x680>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e19a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287a:	4bac      	ldr	r3, [pc, #688]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2202      	movs	r2, #2
 8002880:	4013      	ands	r3, r2
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x3b6>
 8002884:	e013      	b.n	80028ae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fc6f 	bl	8001168 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288e:	e009      	b.n	80028a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe fc6a 	bl	8001168 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	4aa5      	ldr	r2, [pc, #660]	; (8002b30 <HAL_RCC_OscConfig+0x680>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e185      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4ba1      	ldr	r3, [pc, #644]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ae:	231f      	movs	r3, #31
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b8:	4b9c      	ldr	r3, [pc, #624]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	4b9b      	ldr	r3, [pc, #620]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028be:	499d      	ldr	r1, [pc, #628]	; (8002b34 <HAL_RCC_OscConfig+0x684>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2210      	movs	r2, #16
 80028ca:	4013      	ands	r3, r2
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d12a      	bne.n	800292c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028d6:	4b95      	ldr	r3, [pc, #596]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	4b94      	ldr	r3, [pc, #592]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028dc:	2104      	movs	r1, #4
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028e2:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e6:	4b91      	ldr	r3, [pc, #580]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fc3b 	bl	8001168 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028f8:	f7fe fc36 	bl	8001168 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e152      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800290a:	4b88      	ldr	r3, [pc, #544]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d0f1      	beq.n	80028f8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002914:	4b85      	ldr	r3, [pc, #532]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002918:	22f8      	movs	r2, #248	; 0xf8
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	00da      	lsls	r2, r3, #3
 8002924:	4b81      	ldr	r3, [pc, #516]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002926:	430a      	orrs	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
 800292a:	e034      	b.n	8002996 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	3305      	adds	r3, #5
 8002932:	d111      	bne.n	8002958 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002934:	4b7d      	ldr	r3, [pc, #500]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002938:	4b7c      	ldr	r3, [pc, #496]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800293a:	2104      	movs	r1, #4
 800293c:	438a      	bics	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002940:	4b7a      	ldr	r3, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	22f8      	movs	r2, #248	; 0xf8
 8002946:	4393      	bics	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002952:	430a      	orrs	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
 8002956:	e01e      	b.n	8002996 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002958:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800295a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295c:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800295e:	2104      	movs	r1, #4
 8002960:	430a      	orrs	r2, r1
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002964:	4b71      	ldr	r3, [pc, #452]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	4b70      	ldr	r3, [pc, #448]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fbfa 	bl	8001168 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800297a:	f7fe fbf5 	bl	8001168 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e111      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800298c:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d1f1      	bne.n	800297a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2220      	movs	r2, #32
 800299c:	4013      	ands	r3, r2
 800299e:	d05c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029a0:	4b62      	ldr	r3, [pc, #392]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	220c      	movs	r2, #12
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d00e      	beq.n	80029ca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029ac:	4b5f      	ldr	r3, [pc, #380]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	220c      	movs	r2, #12
 80029b2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d114      	bne.n	80029e2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029b8:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	23c0      	movs	r3, #192	; 0xc0
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	401a      	ands	r2, r3
 80029c2:	23c0      	movs	r3, #192	; 0xc0
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029ca:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80029cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	029b      	lsls	r3, r3, #10
 80029d2:	4013      	ands	r3, r2
 80029d4:	d040      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5a8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d03c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0e6      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01b      	beq.n	8002a22 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029ea:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0249      	lsls	r1, r1, #9
 80029f4:	430a      	orrs	r2, r1
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fbb6 	bl	8001168 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a02:	f7fe fbb1 	bl	8001168 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e0cd      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a14:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x552>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a28:	4943      	ldr	r1, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x688>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fb9b 	bl	8001168 <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a38:	f7fe fb96 	bl	8001168 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0b2      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a4a:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	4013      	ands	r3, r2
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x588>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a58:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d100      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5b4>
 8002a62:	e0a4      	b.n	8002bae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	220c      	movs	r2, #12
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d100      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5c2>
 8002a70:	e078      	b.n	8002b64 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d14c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002a80:	492e      	ldr	r1, [pc, #184]	; (8002b3c <HAL_RCC_OscConfig+0x68c>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fb6f 	bl	8001168 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fb6a 	bl	8001168 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e086      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	049b      	lsls	r3, r3, #18
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_RCC_OscConfig+0x690>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0449      	lsls	r1, r1, #17
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fb3d 	bl	8001168 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fb38 	bl	8001168 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e054      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	049b      	lsls	r3, r3, #18
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x644>
 8002b12:	e04c      	b.n	8002bae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <HAL_RCC_OscConfig+0x68c>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fb22 	bl	8001168 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x6a6>
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	00001388 	.word	0x00001388
 8002b34:	efffffff 	.word	0xefffffff
 8002b38:	fffeffff 	.word	0xfffeffff
 8002b3c:	feffffff 	.word	0xfeffffff
 8002b40:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fb10 	bl	8001168 <HAL_GetTick>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e02c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_RCC_OscConfig+0x708>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	049b      	lsls	r3, r3, #18
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x694>
 8002b62:	e024      	b.n	8002bae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e01f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_RCC_OscConfig+0x708>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x708>)
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	23c0      	movs	r3, #192	; 0xc0
 8002b80:	025b      	lsls	r3, r3, #9
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d10e      	bne.n	8002baa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	220f      	movs	r2, #15
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	23f0      	movs	r3, #240	; 0xf0
 8002b9e:	039b      	lsls	r3, r3, #14
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b008      	add	sp, #32
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0bf      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d911      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4393      	bics	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf0:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0a6      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2202      	movs	r2, #2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2204      	movs	r2, #4
 8002c12:	4013      	ands	r3, r2
 8002c14:	d006      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c16:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c1c:	21e0      	movs	r1, #224	; 0xe0
 8002c1e:	00c9      	lsls	r1, r1, #3
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	22f0      	movs	r2, #240	; 0xf0
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d04c      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	4013      	ands	r3, r2
 8002c54:	d120      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07a      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	049b      	lsls	r3, r3, #18
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d114      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06e      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	4013      	ands	r3, r2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e062      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e05b      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fa5c 	bl	8001168 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	e009      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fe fa57 	bl	8001168 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_RCC_ClockConfig+0x1a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e042      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	220c      	movs	r2, #12
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1ec      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d211      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCC_ClockConfig+0x19c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e020      	b.n	8002d50 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2204      	movs	r2, #4
 8002d14:	4013      	ands	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_RCC_ClockConfig+0x1a8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d2c:	f000 f820 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d30:	0001      	movs	r1, r0
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x1a0>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	220f      	movs	r2, #15
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1ac>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	000a      	movs	r2, r1
 8002d42:	40da      	lsrs	r2, r3
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1b0>)
 8002d46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f7fe f9c7 	bl	80010dc <HAL_InitTick>
  
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b004      	add	sp, #16
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	00001388 	.word	0x00001388
 8002d64:	fffff8ff 	.word	0xfffff8ff
 8002d68:	080038c0 	.word	0x080038c0
 8002d6c:	20000000 	.word	0x20000000

08002d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	220c      	movs	r2, #12
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d046      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d9a:	d848      	bhi.n	8002e2e <HAL_RCC_GetSysClockFreq+0xbe>
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d002      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x36>
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d003      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x3c>
 8002da4:	e043      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002da8:	613b      	str	r3, [r7, #16]
      break;
 8002daa:	e043      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	220f      	movs	r2, #15
 8002db2:	4013      	ands	r3, r2
 8002db4:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
 8002dc6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	23c0      	movs	r3, #192	; 0xc0
 8002dcc:	025b      	lsls	r3, r3, #9
 8002dce:	401a      	ands	r2, r3
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	025b      	lsls	r3, r3, #9
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d109      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	481a      	ldr	r0, [pc, #104]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ddc:	f7fd f994 	bl	8000108 <__udivsi3>
 8002de0:	0003      	movs	r3, r0
 8002de2:	001a      	movs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4353      	muls	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e01a      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	23c0      	movs	r3, #192	; 0xc0
 8002df0:	025b      	lsls	r3, r3, #9
 8002df2:	401a      	ands	r2, r3
 8002df4:	23c0      	movs	r3, #192	; 0xc0
 8002df6:	025b      	lsls	r3, r3, #9
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	4814      	ldr	r0, [pc, #80]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e00:	f7fd f982 	bl	8000108 <__udivsi3>
 8002e04:	0003      	movs	r3, r0
 8002e06:	001a      	movs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4353      	muls	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	4810      	ldr	r0, [pc, #64]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002e14:	f7fd f978 	bl	8000108 <__udivsi3>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4353      	muls	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	613b      	str	r3, [r7, #16]
      break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e2a:	613b      	str	r3, [r7, #16]
      break;
 8002e2c:	e002      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002e30:	613b      	str	r3, [r7, #16]
      break;
 8002e32:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e34:	693b      	ldr	r3, [r7, #16]
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	080038d8 	.word	0x080038d8
 8002e4c:	080038e8 	.word	0x080038e8
 8002e50:	02dc6c00 	.word	0x02dc6c00
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e70:	f7ff fff2 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e74:	0001      	movs	r1, r0
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	4013      	ands	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	40d9      	lsrs	r1, r3
 8002e86:	000b      	movs	r3, r1
}    
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000
 8002e94:	080038d0 	.word	0x080038d0

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	223d      	movs	r2, #61	; 0x3d
 8002eae:	5c9b      	ldrb	r3, [r3, r2]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	223c      	movs	r2, #60	; 0x3c
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7fd febd 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	223d      	movs	r2, #61	; 0x3d
 8002eca:	2102      	movs	r1, #2
 8002ecc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	0010      	movs	r0, r2
 8002eda:	f000 f871 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2246      	movs	r2, #70	; 0x46
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223e      	movs	r2, #62	; 0x3e
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	223f      	movs	r2, #63	; 0x3f
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	5499      	strb	r1, [r3, r2]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	2101      	movs	r1, #1
 8002efc:	5499      	strb	r1, [r3, r2]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2241      	movs	r2, #65	; 0x41
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2242      	movs	r2, #66	; 0x42
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2243      	movs	r2, #67	; 0x43
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2244      	movs	r2, #68	; 0x44
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2245      	movs	r2, #69	; 0x45
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223d      	movs	r2, #61	; 0x3d
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	223d      	movs	r2, #61	; 0x3d
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d001      	beq.n	8002f50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e02e      	b.n	8002fae <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223d      	movs	r2, #61	; 0x3d
 8002f54:	2102      	movs	r1, #2
 8002f56:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_TIM_Base_Start+0x80>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00a      	beq.n	8002f78 <HAL_TIM_Base_Start+0x40>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start+0x40>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_TIM_Base_Start+0x84>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2207      	movs	r2, #7
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a30      	ldr	r2, [pc, #192]	; (8003094 <TIM_Base_SetConfig+0xd4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d008      	beq.n	8002fea <TIM_Base_SetConfig+0x2a>
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	05db      	lsls	r3, r3, #23
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x2a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <TIM_Base_SetConfig+0xd8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2270      	movs	r2, #112	; 0x70
 8002fee:	4393      	bics	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	; (8003094 <TIM_Base_SetConfig+0xd4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d014      	beq.n	800302e <TIM_Base_SetConfig+0x6e>
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	429a      	cmp	r2, r3
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0x6e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a21      	ldr	r2, [pc, #132]	; (8003098 <TIM_Base_SetConfig+0xd8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x6e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a20      	ldr	r2, [pc, #128]	; (800309c <TIM_Base_SetConfig+0xdc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x6e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1f      	ldr	r2, [pc, #124]	; (80030a0 <TIM_Base_SetConfig+0xe0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x6e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a1e      	ldr	r2, [pc, #120]	; (80030a4 <TIM_Base_SetConfig+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <TIM_Base_SetConfig+0xe8>)
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	4393      	bics	r3, r2
 8003046:	001a      	movs	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <TIM_Base_SetConfig+0xd4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <TIM_Base_SetConfig+0xbe>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <TIM_Base_SetConfig+0xe0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_Base_SetConfig+0xbe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <TIM_Base_SetConfig+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d103      	bne.n	8003086 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	615a      	str	r2, [r3, #20]
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40002000 	.word	0x40002000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800
 80030a8:	fffffcff 	.word	0xfffffcff

080030ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e044      	b.n	8003148 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2278      	movs	r2, #120	; 0x78
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7fd fe05 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2224      	movs	r2, #36	; 0x24
 80030da:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2101      	movs	r1, #1
 80030e8:	438a      	bics	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 f830 	bl	8003154 <UART_SetConfig>
 80030f4:	0003      	movs	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e024      	b.n	8003148 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 f963 	bl	80033d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	490d      	ldr	r1, [pc, #52]	; (8003150 <HAL_UART_Init+0xa4>)
 800311a:	400a      	ands	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	212a      	movs	r1, #42	; 0x2a
 800312a:	438a      	bics	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 f9fb 	bl	800353c <UART_CheckIdleState>
 8003146:	0003      	movs	r3, r0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}
 8003150:	ffffb7ff 	.word	0xffffb7ff

08003154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800315c:	231e      	movs	r3, #30
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a8d      	ldr	r2, [pc, #564]	; (80033b8 <UART_SetConfig+0x264>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a88      	ldr	r2, [pc, #544]	; (80033bc <UART_SetConfig+0x268>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a7f      	ldr	r2, [pc, #508]	; (80033c0 <UART_SetConfig+0x26c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7b      	ldr	r2, [pc, #492]	; (80033c4 <UART_SetConfig+0x270>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d127      	bne.n	800322a <UART_SetConfig+0xd6>
 80031da:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <UART_SetConfig+0x274>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	2203      	movs	r2, #3
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d00d      	beq.n	8003202 <UART_SetConfig+0xae>
 80031e6:	d81b      	bhi.n	8003220 <UART_SetConfig+0xcc>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d014      	beq.n	8003216 <UART_SetConfig+0xc2>
 80031ec:	d818      	bhi.n	8003220 <UART_SetConfig+0xcc>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <UART_SetConfig+0xa4>
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d00a      	beq.n	800320c <UART_SetConfig+0xb8>
 80031f6:	e013      	b.n	8003220 <UART_SetConfig+0xcc>
 80031f8:	231f      	movs	r3, #31
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e021      	b.n	8003246 <UART_SetConfig+0xf2>
 8003202:	231f      	movs	r3, #31
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e01c      	b.n	8003246 <UART_SetConfig+0xf2>
 800320c:	231f      	movs	r3, #31
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2204      	movs	r2, #4
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e017      	b.n	8003246 <UART_SetConfig+0xf2>
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2208      	movs	r2, #8
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e012      	b.n	8003246 <UART_SetConfig+0xf2>
 8003220:	231f      	movs	r3, #31
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2210      	movs	r2, #16
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e00d      	b.n	8003246 <UART_SetConfig+0xf2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a67      	ldr	r2, [pc, #412]	; (80033cc <UART_SetConfig+0x278>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d104      	bne.n	800323e <UART_SetConfig+0xea>
 8003234:	231f      	movs	r3, #31
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e003      	b.n	8003246 <UART_SetConfig+0xf2>
 800323e:	231f      	movs	r3, #31
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2210      	movs	r2, #16
 8003244:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	429a      	cmp	r2, r3
 8003250:	d15c      	bne.n	800330c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003252:	231f      	movs	r3, #31
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d015      	beq.n	8003288 <UART_SetConfig+0x134>
 800325c:	dc18      	bgt.n	8003290 <UART_SetConfig+0x13c>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d00d      	beq.n	800327e <UART_SetConfig+0x12a>
 8003262:	dc15      	bgt.n	8003290 <UART_SetConfig+0x13c>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <UART_SetConfig+0x11a>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d005      	beq.n	8003278 <UART_SetConfig+0x124>
 800326c:	e010      	b.n	8003290 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326e:	f7ff fdfd 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        break;
 8003276:	e012      	b.n	800329e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <UART_SetConfig+0x27c>)
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e00f      	b.n	800329e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7ff fd77 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8003282:	0003      	movs	r3, r0
 8003284:	61bb      	str	r3, [r7, #24]
        break;
 8003286:	e00a      	b.n	800329e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	61bb      	str	r3, [r7, #24]
        break;
 800328e:	e006      	b.n	800329e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003294:	231e      	movs	r3, #30
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
        break;
 800329c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d100      	bne.n	80032a6 <UART_SetConfig+0x152>
 80032a4:	e07a      	b.n	800339c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	005a      	lsls	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	18d2      	adds	r2, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	0019      	movs	r1, r3
 80032b8:	0010      	movs	r0, r2
 80032ba:	f7fc ff25 	bl	8000108 <__udivsi3>
 80032be:	0003      	movs	r3, r0
 80032c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d91c      	bls.n	8003302 <UART_SetConfig+0x1ae>
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	025b      	lsls	r3, r3, #9
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d217      	bcs.n	8003302 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	200e      	movs	r0, #14
 80032d8:	183b      	adds	r3, r7, r0
 80032da:	210f      	movs	r1, #15
 80032dc:	438a      	bics	r2, r1
 80032de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2207      	movs	r2, #7
 80032e8:	4013      	ands	r3, r2
 80032ea:	b299      	uxth	r1, r3
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	183a      	adds	r2, r7, r0
 80032f0:	8812      	ldrh	r2, [r2, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	183a      	adds	r2, r7, r0
 80032fc:	8812      	ldrh	r2, [r2, #0]
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	e04c      	b.n	800339c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003302:	231e      	movs	r3, #30
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e047      	b.n	800339c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330c:	231f      	movs	r3, #31
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b08      	cmp	r3, #8
 8003314:	d015      	beq.n	8003342 <UART_SetConfig+0x1ee>
 8003316:	dc18      	bgt.n	800334a <UART_SetConfig+0x1f6>
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00d      	beq.n	8003338 <UART_SetConfig+0x1e4>
 800331c:	dc15      	bgt.n	800334a <UART_SetConfig+0x1f6>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <UART_SetConfig+0x1d4>
 8003322:	2b02      	cmp	r3, #2
 8003324:	d005      	beq.n	8003332 <UART_SetConfig+0x1de>
 8003326:	e010      	b.n	800334a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7ff fda0 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 800332c:	0003      	movs	r3, r0
 800332e:	61bb      	str	r3, [r7, #24]
        break;
 8003330:	e012      	b.n	8003358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <UART_SetConfig+0x27c>)
 8003334:	61bb      	str	r3, [r7, #24]
        break;
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003338:	f7ff fd1a 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800333c:	0003      	movs	r3, r0
 800333e:	61bb      	str	r3, [r7, #24]
        break;
 8003340:	e00a      	b.n	8003358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	61bb      	str	r3, [r7, #24]
        break;
 8003348:	e006      	b.n	8003358 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800334e:	231e      	movs	r3, #30
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
        break;
 8003356:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01e      	beq.n	800339c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	085a      	lsrs	r2, r3, #1
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	18d2      	adds	r2, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0019      	movs	r1, r3
 800336e:	0010      	movs	r0, r2
 8003370:	f7fc feca 	bl	8000108 <__udivsi3>
 8003374:	0003      	movs	r3, r0
 8003376:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d90a      	bls.n	8003394 <UART_SetConfig+0x240>
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	025b      	lsls	r3, r3, #9
 8003384:	429a      	cmp	r2, r3
 8003386:	d205      	bcs.n	8003394 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e003      	b.n	800339c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003394:	231e      	movs	r3, #30
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033a8:	231e      	movs	r3, #30
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b008      	add	sp, #32
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	efff69f3 	.word	0xefff69f3
 80033bc:	ffffcfff 	.word	0xffffcfff
 80033c0:	fffff4ff 	.word	0xfffff4ff
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40004400 	.word	0x40004400
 80033d0:	007a1200 	.word	0x007a1200

080033d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	d00b      	beq.n	80033fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a4a      	ldr	r2, [pc, #296]	; (8003518 <UART_AdvFeatureConfig+0x144>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2202      	movs	r2, #2
 8003404:	4013      	ands	r3, r2
 8003406:	d00b      	beq.n	8003420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a43      	ldr	r2, [pc, #268]	; (800351c <UART_AdvFeatureConfig+0x148>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2204      	movs	r2, #4
 8003426:	4013      	ands	r3, r2
 8003428:	d00b      	beq.n	8003442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <UART_AdvFeatureConfig+0x14c>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2208      	movs	r2, #8
 8003448:	4013      	ands	r3, r2
 800344a:	d00b      	beq.n	8003464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a34      	ldr	r2, [pc, #208]	; (8003524 <UART_AdvFeatureConfig+0x150>)
 8003454:	4013      	ands	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2210      	movs	r2, #16
 800346a:	4013      	ands	r3, r2
 800346c:	d00b      	beq.n	8003486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <UART_AdvFeatureConfig+0x154>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2220      	movs	r2, #32
 800348c:	4013      	ands	r3, r2
 800348e:	d00b      	beq.n	80034a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4a25      	ldr	r2, [pc, #148]	; (800352c <UART_AdvFeatureConfig+0x158>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	4013      	ands	r3, r2
 80034b0:	d01d      	beq.n	80034ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <UART_AdvFeatureConfig+0x15c>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	035b      	lsls	r3, r3, #13
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d10b      	bne.n	80034ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <UART_AdvFeatureConfig+0x160>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00b      	beq.n	8003510 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <UART_AdvFeatureConfig+0x164>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}
 8003518:	fffdffff 	.word	0xfffdffff
 800351c:	fffeffff 	.word	0xfffeffff
 8003520:	fffbffff 	.word	0xfffbffff
 8003524:	ffff7fff 	.word	0xffff7fff
 8003528:	ffffefff 	.word	0xffffefff
 800352c:	ffffdfff 	.word	0xffffdfff
 8003530:	ffefffff 	.word	0xffefffff
 8003534:	ff9fffff 	.word	0xff9fffff
 8003538:	fff7ffff 	.word	0xfff7ffff

0800353c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b092      	sub	sp, #72	; 0x48
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2284      	movs	r2, #132	; 0x84
 8003548:	2100      	movs	r1, #0
 800354a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800354c:	f7fd fe0c 	bl	8001168 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2208      	movs	r2, #8
 800355c:	4013      	ands	r3, r2
 800355e:	2b08      	cmp	r3, #8
 8003560:	d12c      	bne.n	80035bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	0391      	lsls	r1, r2, #14
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4a46      	ldr	r2, [pc, #280]	; (8003684 <UART_CheckIdleState+0x148>)
 800356c:	9200      	str	r2, [sp, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	f000 f88c 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d021      	beq.n	80035bc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003578:	f3ef 8310 	mrs	r3, PRIMASK
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
 8003582:	2301      	movs	r3, #1
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2278      	movs	r2, #120	; 0x78
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e05f      	b.n	800367c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d146      	bne.n	8003658 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	03d1      	lsls	r1, r2, #15
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <UART_CheckIdleState+0x148>)
 80035d4:	9200      	str	r2, [sp, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f000 f858 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 80035dc:	1e03      	subs	r3, r0, #0
 80035de:	d03b      	beq.n	8003658 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e0:	f3ef 8310 	mrs	r3, PRIMASK
 80035e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80035e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ea:	2301      	movs	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f383 8810 	msr	PRIMASK, r3
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4921      	ldr	r1, [pc, #132]	; (8003688 <UART_CheckIdleState+0x14c>)
 8003602:	400a      	ands	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f383 8810 	msr	PRIMASK, r3
}
 8003610:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003612:	f3ef 8310 	mrs	r3, PRIMASK
 8003616:	61bb      	str	r3, [r7, #24]
  return(result);
 8003618:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
 800361c:	2301      	movs	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f383 8810 	msr	PRIMASK, r3
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	438a      	bics	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	2120      	movs	r1, #32
 800364a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2278      	movs	r2, #120	; 0x78
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e011      	b.n	800367c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	2120      	movs	r1, #32
 8003664:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2278      	movs	r2, #120	; 0x78
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b010      	add	sp, #64	; 0x40
 8003682:	bd80      	pop	{r7, pc}
 8003684:	01ffffff 	.word	0x01ffffff
 8003688:	fffffedf 	.word	0xfffffedf

0800368c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	e04b      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3301      	adds	r3, #1
 80036a2:	d048      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fd fd60 	bl	8001168 <HAL_GetTick>
 80036a8:	0002      	movs	r2, r0
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e04b      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d035      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2208      	movs	r2, #8
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d111      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f83c 	bl	8003760 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2284      	movs	r2, #132	; 0x84
 80036ec:	2108      	movs	r1, #8
 80036ee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2278      	movs	r2, #120	; 0x78
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e02c      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	401a      	ands	r2, r3
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	429a      	cmp	r2, r3
 800370e:	d112      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f81f 	bl	8003760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2284      	movs	r2, #132	; 0x84
 8003726:	2120      	movs	r1, #32
 8003728:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2278      	movs	r2, #120	; 0x78
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e00f      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	425a      	negs	r2, r3
 8003746:	4153      	adcs	r3, r2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	001a      	movs	r2, r3
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d0a4      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003768:	f3ef 8310 	mrs	r3, PRIMASK
 800376c:	617b      	str	r3, [r7, #20]
  return(result);
 800376e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4926      	ldr	r1, [pc, #152]	; (8003824 <UART_EndRxTransfer+0xc4>)
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	623b      	str	r3, [r7, #32]
  return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d118      	bne.n	8003806 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037de:	2301      	movs	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2110      	movs	r1, #16
 80037f6:	438a      	bics	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	2120      	movs	r1, #32
 800380c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	669a      	str	r2, [r3, #104]	; 0x68
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b00e      	add	sp, #56	; 0x38
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	fffffedf 	.word	0xfffffedf

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	2600      	movs	r6, #0
 800383a:	f000 f82b 	bl	8003894 <_init>
 800383e:	4d0a      	ldr	r5, [pc, #40]	; (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	00b3      	lsls	r3, r6, #2
 800384e:	58eb      	ldr	r3, [r5, r3]
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	00b3      	lsls	r3, r6, #2
 8003858:	58eb      	ldr	r3, [r5, r3]
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	080038f8 	.word	0x080038f8
 8003864:	080038f8 	.word	0x080038f8
 8003868:	080038f8 	.word	0x080038f8
 800386c:	080038fc 	.word	0x080038fc

08003870 <memcpy>:
 8003870:	2300      	movs	r3, #0
 8003872:	b510      	push	{r4, lr}
 8003874:	429a      	cmp	r2, r3
 8003876:	d100      	bne.n	800387a <memcpy+0xa>
 8003878:	bd10      	pop	{r4, pc}
 800387a:	5ccc      	ldrb	r4, [r1, r3]
 800387c:	54c4      	strb	r4, [r0, r3]
 800387e:	3301      	adds	r3, #1
 8003880:	e7f8      	b.n	8003874 <memcpy+0x4>

08003882 <memset>:
 8003882:	0003      	movs	r3, r0
 8003884:	1882      	adds	r2, r0, r2
 8003886:	4293      	cmp	r3, r2
 8003888:	d100      	bne.n	800388c <memset+0xa>
 800388a:	4770      	bx	lr
 800388c:	7019      	strb	r1, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	e7f9      	b.n	8003886 <memset+0x4>
	...

08003894 <_init>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr

080038a0 <_fini>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr
